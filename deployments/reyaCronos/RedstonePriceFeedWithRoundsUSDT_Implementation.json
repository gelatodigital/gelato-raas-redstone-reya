{
  "address": "0xD95cA5E4152E1963E27404Bc89280DF341c18076",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockTimestamp",
          "type": "uint256"
        }
      ],
      "name": "BlockTimestampIsTooBig",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CalldataMustHaveValidPayload",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CalldataOverOrUnderFlow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CanNotPickMedianOfEmptyArray",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CannotUpdateMoreThanOneDataFeed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dataFeedId",
          "type": "bytes32"
        }
      ],
      "name": "DataFeedIdNotFound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dataFeedId",
          "type": "bytes32"
        }
      ],
      "name": "DataFeedValueCannotBeZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "expectedDataTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dataPackageTimestamp",
          "type": "uint256"
        }
      ],
      "name": "DataPackageTimestampMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DataPackageTimestampMustNotBeZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DataPackageTimestampsMustBeEqual",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dataTimestamp",
          "type": "uint256"
        }
      ],
      "name": "DataTimestampIsTooBig",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "receivedDataTimestampMilliseconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastDataTimestampMilliseconds",
          "type": "uint256"
        }
      ],
      "name": "DataTimestampShouldBeNewerThanBefore",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EachSignerMustProvideTheSameValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyCalldataPointersArr",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GetDataServiceIdNotImplemented",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncorrectUnsignedMetadataSize",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "receivedSignersCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requiredSignersCount",
          "type": "uint256"
        }
      ],
      "name": "InsufficientNumberOfUniqueSigners",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCalldataPointer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBlockTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdateTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minIntervalBetweenUpdates",
          "type": "uint256"
        }
      ],
      "name": "MinIntervalBetweenUpdatesHasNotPassedYet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RedstonePayloadMustHaveAtLeastOneDataPackage",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "RoundNotFound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receivedSigner",
          "type": "address"
        }
      ],
      "name": "SignerNotAuthorised",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "receivedTimestampSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blockTimestamp",
          "type": "uint256"
        }
      ],
      "name": "TimestampFromTooLongFuture",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "receivedTimestampSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blockTimestamp",
          "type": "uint256"
        }
      ],
      "name": "TimestampIsTooOld",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "UnsafeUint256ToUint80Conversion",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "UnsafeUintToIntConversion",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "UpdaterNotAuthorised",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "int256",
          "name": "current",
          "type": "int256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        }
      ],
      "name": "AnswerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "aggregateValues",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aggregator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "description",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "extractTimestampsAndAssertAllAreEqual",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "extractedTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllowedTimestampDiffsInSeconds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maxDataAheadSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxDataDelaySeconds",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signerAddress",
          "type": "address"
        }
      ],
      "name": "getAuthorisedSignerIndex",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockTimestampFromLatestUpdate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDataFeedId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDataFeedIds",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "dataFeedIds",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dataFeedId",
          "type": "bytes32"
        }
      ],
      "name": "getDataFeedIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDataServiceId",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDataTimestampFromLatestUpdate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lastDataTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestRoundId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "latestRoundId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestRoundParams",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "latestRoundId",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "latestRoundDataTimestamp",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "latestRoundBlockTimestamp",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinIntervalBetweenUpdates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "getPackedTimestampsForRound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "roundTimestamps",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPackedTimestampsFromLatestUpdate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "packedTimestamps",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeedAdapter",
      "outputs": [
        {
          "internalType": "contract IRedstoneAdapter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeedAdapterWithRounds",
      "outputs": [
        {
          "internalType": "contract PriceFeedsAdapterWithRounds",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint80",
          "name": "requestedRoundId",
          "type": "uint80"
        }
      ],
      "name": "getRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dataFeedId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "getRoundDataFromAdapter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "dataFeedValue",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "roundDataTimestamp",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "roundBlockTimestamp",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTimestampsFromLatestUpdate",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "dataTimestamp",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "blockTimestamp",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUniqueSignersThreshold",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dataFeedId",
          "type": "bytes32"
        }
      ],
      "name": "getValueForDataFeed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dataFeedId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "getValueForDataFeedAndRound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "dataFeedValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dataFeedId",
          "type": "bytes32"
        }
      ],
      "name": "getValueForDataFeedUnsafe",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "dataFeedValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "dataFeedIds",
          "type": "bytes32[]"
        }
      ],
      "name": "getValuesForDataFeeds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "requestedDataFeedIds",
          "type": "bytes32[]"
        }
      ],
      "name": "getValuesForDataFeedsUnsafe",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestAnswer",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRound",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "updater",
          "type": "address"
        }
      ],
      "name": "requireAuthorisedUpdater",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dataPackagesTimestamp",
          "type": "uint256"
        }
      ],
      "name": "updateDataFeedsValues",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dataFeedId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "valueForDataFeed",
          "type": "uint256"
        }
      ],
      "name": "validateDataFeedValueOnRead",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dataFeedId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "valueForDataFeed",
          "type": "uint256"
        }
      ],
      "name": "validateDataFeedValueOnWrite",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dataPackagesTimestamp",
          "type": "uint256"
        }
      ],
      "name": "validateDataPackagesTimestampOnce",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dataPackagesTimestamp",
          "type": "uint256"
        }
      ],
      "name": "validateProposedDataPackagesTimestamp",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "receivedTimestampMilliseconds",
          "type": "uint256"
        }
      ],
      "name": "validateTimestamp",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x98541e96132878e17c0c189c48cfb527b4024a35b32ba100f4a88d8a411b0496",
  "receipt": {
    "to": null,
    "from": "0xaE173a960084903b1d278Ff9E3A81DeD82275556",
    "contractAddress": "0xD95cA5E4152E1963E27404Bc89280DF341c18076",
    "transactionIndex": 1,
    "gasUsed": "2278544",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xba24a15a0e19b67bc5091d03f7188a5c4f0dd328f61bd948c9a5ba0b8555f8e0",
    "transactionHash": "0x98541e96132878e17c0c189c48cfb527b4024a35b32ba100f4a88d8a411b0496",
    "logs": [],
    "blockNumber": 536,
    "cumulativeGasUsed": "2278544",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d0f6477388c16b781f2b147ab7239ee3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"}],\"name\":\"BlockTimestampIsTooBig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CalldataMustHaveValidPayload\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CalldataOverOrUnderFlow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CanNotPickMedianOfEmptyArray\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotUpdateMoreThanOneDataFeed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataFeedId\",\"type\":\"bytes32\"}],\"name\":\"DataFeedIdNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataFeedId\",\"type\":\"bytes32\"}],\"name\":\"DataFeedValueCannotBeZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expectedDataTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dataPackageTimestamp\",\"type\":\"uint256\"}],\"name\":\"DataPackageTimestampMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DataPackageTimestampMustNotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DataPackageTimestampsMustBeEqual\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dataTimestamp\",\"type\":\"uint256\"}],\"name\":\"DataTimestampIsTooBig\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receivedDataTimestampMilliseconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDataTimestampMilliseconds\",\"type\":\"uint256\"}],\"name\":\"DataTimestampShouldBeNewerThanBefore\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EachSignerMustProvideTheSameValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyCalldataPointersArr\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GetDataServiceIdNotImplemented\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectUnsignedMetadataSize\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receivedSignersCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredSignersCount\",\"type\":\"uint256\"}],\"name\":\"InsufficientNumberOfUniqueSigners\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCalldataPointer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBlockTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minIntervalBetweenUpdates\",\"type\":\"uint256\"}],\"name\":\"MinIntervalBetweenUpdatesHasNotPassedYet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedstonePayloadMustHaveAtLeastOneDataPackage\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"RoundNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receivedSigner\",\"type\":\"address\"}],\"name\":\"SignerNotAuthorised\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receivedTimestampSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"}],\"name\":\"TimestampFromTooLongFuture\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receivedTimestampSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"}],\"name\":\"TimestampIsTooOld\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UnsafeUint256ToUint80Conversion\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UnsafeUintToIntConversion\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"UpdaterNotAuthorised\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"int256\",\"name\":\"current\",\"type\":\"int256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"name\":\"AnswerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"aggregateValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aggregator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extractTimestampsAndAssertAllAreEqual\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"extractedTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllowedTimestampDiffsInSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxDataAheadSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDataDelaySeconds\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signerAddress\",\"type\":\"address\"}],\"name\":\"getAuthorisedSignerIndex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockTimestampFromLatestUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDataFeedId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDataFeedIds\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataFeedIds\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataFeedId\",\"type\":\"bytes32\"}],\"name\":\"getDataFeedIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDataServiceId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDataTimestampFromLatestUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastDataTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestRoundId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"latestRoundId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestRoundParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"latestRoundId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"latestRoundDataTimestamp\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"latestRoundBlockTimestamp\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinIntervalBetweenUpdates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"getPackedTimestampsForRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"roundTimestamps\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPackedTimestampsFromLatestUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"packedTimestamps\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeedAdapter\",\"outputs\":[{\"internalType\":\"contract IRedstoneAdapter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeedAdapterWithRounds\",\"outputs\":[{\"internalType\":\"contract PriceFeedsAdapterWithRounds\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"requestedRoundId\",\"type\":\"uint80\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataFeedId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"getRoundDataFromAdapter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dataFeedValue\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"roundDataTimestamp\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"roundBlockTimestamp\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimestampsFromLatestUpdate\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"dataTimestamp\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"blockTimestamp\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUniqueSignersThreshold\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataFeedId\",\"type\":\"bytes32\"}],\"name\":\"getValueForDataFeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataFeedId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"getValueForDataFeedAndRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dataFeedValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataFeedId\",\"type\":\"bytes32\"}],\"name\":\"getValueForDataFeedUnsafe\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dataFeedValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataFeedIds\",\"type\":\"bytes32[]\"}],\"name\":\"getValuesForDataFeeds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"requestedDataFeedIds\",\"type\":\"bytes32[]\"}],\"name\":\"getValuesForDataFeedsUnsafe\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRound\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"updater\",\"type\":\"address\"}],\"name\":\"requireAuthorisedUpdater\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dataPackagesTimestamp\",\"type\":\"uint256\"}],\"name\":\"updateDataFeedsValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataFeedId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"valueForDataFeed\",\"type\":\"uint256\"}],\"name\":\"validateDataFeedValueOnRead\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataFeedId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"valueForDataFeed\",\"type\":\"uint256\"}],\"name\":\"validateDataFeedValueOnWrite\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dataPackagesTimestamp\",\"type\":\"uint256\"}],\"name\":\"validateDataPackagesTimestampOnce\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dataPackagesTimestamp\",\"type\":\"uint256\"}],\"name\":\"validateProposedDataPackagesTimestamp\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receivedTimestampMilliseconds\",\"type\":\"uint256\"}],\"name\":\"validateTimestamp\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"aggregateValues(uint256[])\":{\"details\":\"This function may be overridden by the child consumer contract. It should aggregate values from different signers to a single uint value. By default, it calculates the median value\",\"params\":{\"values\":\"An array of uint256 values from different signers\"},\"returns\":{\"_0\":\"Result of the aggregation in the form of a single number\"}},\"decimals()\":{\"details\":\"By default, RedStone uses 8 decimals for data feeds\",\"returns\":{\"_0\":\"decimals The number of decimals in the price feed values\"}},\"description()\":{\"returns\":{\"_0\":\"description\"}},\"getAllowedTimestampDiffsInSeconds()\":{\"details\":\"Helpful function for getting values for timestamp validation\",\"returns\":{\"maxDataAheadSeconds\":\"Max allowed number of seconds ahead of block.timrstamp\",\"maxDataDelaySeconds\":\"Max allowed number of seconds for data delay\"}},\"getBlockTimestamp()\":{\"details\":\"This function can be overriden, e.g. to use block.number instead of block.timestamp It can be useful in some L2 chains, as sometimes their different blocks can have the same timestamp\",\"returns\":{\"_0\":\"timestamp Timestamp or Block number or any other number that can identify time in the context of the given blockchain\"}},\"getBlockTimestampFromLatestUpdate()\":{\"returns\":{\"blockTimestamp\":\"The block timestamp of the latest successful update\"}},\"getDataFeedId()\":{\"returns\":{\"_0\":\"dataFeedId The identifier of the data feed\"}},\"getDataFeedIds()\":{\"details\":\"this function must be implemented in derived contracts\",\"returns\":{\"dataFeedIds\":\"An array of data feed identifiers\"}},\"getDataFeedIndex(bytes32)\":{\"details\":\"This function can (and should) be overriden to reduce gas costs of other functions\",\"params\":{\"dataFeedId\":\"The data feed identifier\"},\"returns\":{\"_0\":\"index The index of the data feed\"}},\"getDataServiceId()\":{\"details\":\"This function must be implemented by the child consumer contract. It should return dataServiceId which DataServiceWrapper will use if not provided explicitly . If not overridden, value will always have to be provided explicitly in DataServiceWrapper.\",\"returns\":{\"_0\":\"dataServiceId being consumed by contract\"}},\"getDataTimestampFromLatestUpdate()\":{\"details\":\"It's virtual, because its implementation can sometimes be different (e.g. SinglePriceFeedAdapterWithClearing)\",\"returns\":{\"lastDataTimestamp\":\"Timestamp of the latest reported data packages\"}},\"getLatestRoundId()\":{\"returns\":{\"latestRoundId\":\"latestRoundId\"}},\"getLatestRoundParams()\":{\"returns\":{\"latestRoundBlockTimestamp\":\"latestRoundBlockTimestamp\",\"latestRoundDataTimestamp\":\"latestRoundDataTimestamp\",\"latestRoundId\":\"latestRoundId\"}},\"getMinIntervalBetweenUpdates()\":{\"details\":\"You can override this function to change the required interval between udpates. Please do not set it to 0, as it may open many attack vectors\",\"returns\":{\"_0\":\"interval The required interval between updates\"}},\"getPackedTimestampsForRound(uint256)\":{\"params\":{\"roundId\":\"Requested round number\"},\"returns\":{\"roundTimestamps\":\"roundTimestamps\"}},\"getPackedTimestampsFromLatestUpdate()\":{\"details\":\"Returns 2 timestamps packed into a single uint256 number\",\"returns\":{\"packedTimestamps\":\"a single uin256 number with 2 timestamps\"}},\"getRoundData(uint80)\":{\"params\":{\"roundId\":\"Requested round identifier\"}},\"getRoundDataFromAdapter(bytes32,uint256)\":{\"params\":{\"dataFeedId\":\"Requested data feed\",\"roundId\":\"Requested round identifier\"},\"returns\":{\"dataFeedValue\":\"dataFeedValue\",\"roundBlockTimestamp\":\"roundBlockTimestamp\",\"roundDataTimestamp\":\"roundDataTimestamp\"}},\"getTimestampsFromLatestUpdate()\":{\"returns\":{\"blockTimestamp\":\"timestamp of the block when the update has happened\",\"dataTimestamp\":\"timestamp (usually in milliseconds) from the signed data packages\"}},\"getUniqueSignersThreshold()\":{\"details\":\"This function should be overridden by the child consumer contract.\",\"returns\":{\"_0\":\"The minimum required value of unique authorised signers\"}},\"getValueForDataFeed(bytes32)\":{\"params\":{\"dataFeedId\":\"The identifier of the requested data feed\"},\"returns\":{\"_0\":\"value The latest value of the given data feed\"}},\"getValueForDataFeedAndRound(bytes32,uint256)\":{\"details\":\"[HIGH RISK] Returns value for the requested data feed from the given round without validation.\",\"params\":{\"dataFeedId\":\"The data feed identifier\",\"roundId\":\"The number of the requested round\"},\"returns\":{\"dataFeedValue\":\"value for the requested data feed from the given round\"}},\"getValueForDataFeedUnsafe(bytes32)\":{\"details\":\"[HIGH RISK] Returns the value for a given data feed from the latest round without validation. Important! Using this function instead of `getValueForDataFeed` may cause significant risk for your smart contracts\",\"params\":{\"dataFeedId\":\"The data feed identifier\"},\"returns\":{\"dataFeedValue\":\"Unvalidated value of the latest successful update\"}},\"getValuesForDataFeeds(bytes32[])\":{\"params\":{\"dataFeedIds\":\"The array of identifiers for the requested feeds\"},\"returns\":{\"_0\":\"values Values of the requested data feeds in the corresponding order\"}},\"getValuesForDataFeedsUnsafe(bytes32[])\":{\"params\":{\"requestedDataFeedIds\":\"The array of identifiers for the requested feeds\"},\"returns\":{\"values\":\"Unvalidated values of the requested data feeds in the corresponding order\"}},\"latestAnswer()\":{\"returns\":{\"_0\":\"latestAnswer The latest successfully reported value\"}},\"latestRound()\":{\"returns\":{\"_0\":\"latestRound The number of the latest successful round\"}},\"latestRoundData()\":{\"details\":\"It uses few helpful functions to abstract logic of getting latest round id and value\",\"returns\":{\"answer\":\"The latest reported value\",\"answeredInRound\":\"The number of the latest round\",\"roundId\":\"The number of the latest round\",\"startedAt\":\"Block timestamp when the latest successful round started\",\"updatedAt\":\"Block timestamp of the latest successful round\"}},\"requireAuthorisedUpdater(address)\":{\"details\":\"This function should revert if msg.sender is not allowed to update data feed values\",\"params\":{\"updater\":\"The address of the proposed updater\"}},\"updateDataFeedsValues(uint256)\":{\"details\":\"This function requires an attached redstone payload to the transaction calldata. It also requires each data package to have exactly the same timestamp\",\"params\":{\"dataPackagesTimestamp\":\"Timestamp of each signed data package in the redstone payload\"}},\"validateDataFeedValueOnRead(bytes32,uint256)\":{\"details\":\"Reverts if proposed value for the proposed data feed id is invalid Is called on every NOT *unsafe method which reads dataFeed By default, it just checks if the value is not equal to 0, but it can be extended\",\"params\":{\"dataFeedId\":\"The data feed identifier\",\"valueForDataFeed\":\"Proposed value for the data feed\"}},\"validateDataFeedValueOnWrite(bytes32,uint256)\":{\"details\":\"Reverts if proposed value for the proposed data feed id is invalid Is called on every NOT *unsafe method which writes dataFeed By default, it does nothing\",\"params\":{\"dataFeedId\":\"The data feed identifier\",\"valueForDataFeed\":\"Proposed value for the data feed\"}},\"validateDataPackagesTimestampOnce(uint256)\":{\"params\":{\"dataPackagesTimestamp\":\"The proposed timestamp (usually in milliseconds)\"}},\"validateProposedDataPackagesTimestamp(uint256)\":{\"params\":{\"dataPackagesTimestamp\":\"The proposed timestamp (usually in milliseconds)\"}},\"validateTimestamp(uint256)\":{\"details\":\"Note! This function is not called directly, it's called for each data package    . in redstone payload and just verifies if each data package has the same timestamp as the one that was saved in the storage\",\"params\":{\"receivedTimestampMilliseconds\":\"Timestamp from a data package\"}},\"version()\":{\"details\":\"Currently it has no specific motivation and was added only to be compatible with the Chainlink interface\",\"returns\":{\"_0\":\"version\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"decimals()\":{\"notice\":\"Returns the number of decimals for the price feed\"},\"description()\":{\"notice\":\"Description of the Price Feed\"},\"getBlockTimestampFromLatestUpdate()\":{\"notice\":\"Returns block timestamp of the latest successful update\"},\"getDataFeedId()\":{\"notice\":\"Returns data feed identifier for the PriceFeed contract\"},\"getDataFeedIds()\":{\"notice\":\"Returns identifiers of all data feeds supported by the Adapter contract\"},\"getDataFeedIndex(bytes32)\":{\"notice\":\"Returns the unique index of the given data feed\"},\"getDataTimestampFromLatestUpdate()\":{\"notice\":\"Returns data timestamp from the latest update\"},\"getLatestRoundId()\":{\"notice\":\"Returns latest successful round number\"},\"getLatestRoundParams()\":{\"notice\":\"Returns data from the latest successful round\"},\"getMinIntervalBetweenUpdates()\":{\"notice\":\"Returns minimal required interval (usually in seconds) between subsequent updates\"},\"getPackedTimestampsForRound(uint256)\":{\"notice\":\"Returns timestamps related to the given round packed into one number\"},\"getRoundData(uint80)\":{\"notice\":\"Returns details for the given round\"},\"getRoundDataFromAdapter(bytes32,uint256)\":{\"notice\":\"Returns details for the given round and data feed\"},\"getTimestampsFromLatestUpdate()\":{\"notice\":\"Returns timestamps of the latest successful update\"},\"getValueForDataFeed(bytes32)\":{\"notice\":\"Returns the latest properly reported value of the data feed\"},\"getValuesForDataFeeds(bytes32[])\":{\"notice\":\"Returns the latest properly reported values for several data feeds\"},\"getValuesForDataFeedsUnsafe(bytes32[])\":{\"notice\":\"[HIGH RISK] Returns the latest properly reported values for several data feeds without validation Important! Using this function instead of `getValuesForDataFeeds` may cause significant risk for your smart contracts\"},\"latestAnswer()\":{\"notice\":\"Old Chainlink function for getting the latest successfully reported value\"},\"latestRound()\":{\"notice\":\"Old Chainlink function for getting the number of latest round\"},\"latestRoundData()\":{\"notice\":\"Returns details of the latest successful update round\"},\"requireAuthorisedUpdater(address)\":{\"notice\":\"Reverts if the updater is not authorised\"},\"updateDataFeedsValues(uint256)\":{\"notice\":\"Updates values of all data feeds supported by the Adapter contract\"},\"validateDataPackagesTimestampOnce(uint256)\":{\"notice\":\"Reverts if the proposed timestamp of data packages it too old or too new comparing to the current block timestamp\"},\"validateProposedDataPackagesTimestamp(uint256)\":{\"notice\":\"Reverts if the proposed timestamp of data packages it too old or too new comparing to the block.timestamp. It also ensures that the proposed timestamp is newer Then the one from the previous update\"},\"version()\":{\"notice\":\"Version of the Price Feed\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/adapters/RedstonePriceFeedWithRoundsUSDT.sol\":\"RedstonePriceFeedWithRoundsUSDT\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"@redstone-finance/evm-connector/contracts/core/CalldataExtractor.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"./RedstoneConstants.sol\\\";\\n\\n/**\\n * @title The base contract with the main logic of data extraction from calldata\\n * @author The Redstone Oracles team\\n * @dev This contract was created to reuse the same logic in the RedstoneConsumerBase\\n * and the ProxyConnector contracts\\n */\\ncontract CalldataExtractor is RedstoneConstants {\\n  using SafeMath for uint256;\\n\\n  error DataPackageTimestampMustNotBeZero();\\n  error DataPackageTimestampsMustBeEqual();\\n  error RedstonePayloadMustHaveAtLeastOneDataPackage();\\n\\n  function extractTimestampsAndAssertAllAreEqual() public pure returns (uint256 extractedTimestamp) {\\n    uint256 calldataNegativeOffset = _extractByteSizeOfUnsignedMetadata();\\n    uint256 dataPackagesCount = _extractDataPackagesCountFromCalldata(calldataNegativeOffset);\\n\\n    if (dataPackagesCount == 0) {\\n      revert RedstonePayloadMustHaveAtLeastOneDataPackage();\\n    }\\n\\n    calldataNegativeOffset += DATA_PACKAGES_COUNT_BS;\\n    for (uint256 dataPackageIndex = 0; dataPackageIndex < dataPackagesCount; dataPackageIndex++) {\\n      uint256 dataPackageByteSize = _getDataPackageByteSize(calldataNegativeOffset);\\n\\n      // Extracting timestamp for the current data package\\n      uint48 dataPackageTimestamp; // uint48, because timestamp uses 6 bytes\\n      uint256 timestampNegativeOffset = (calldataNegativeOffset + TIMESTAMP_NEGATIVE_OFFSET_IN_DATA_PACKAGE_WITH_STANDARD_SLOT_BS);\\n      uint256 timestampOffset = msg.data.length - timestampNegativeOffset;\\n      assembly {\\n        dataPackageTimestamp := calldataload(timestampOffset)\\n      }\\n\\n      if (dataPackageTimestamp == 0) {\\n        revert DataPackageTimestampMustNotBeZero();\\n      }\\n\\n      if (extractedTimestamp == 0) {\\n        extractedTimestamp = dataPackageTimestamp;\\n      } else if (dataPackageTimestamp != extractedTimestamp) {\\n        revert DataPackageTimestampsMustBeEqual();\\n      }\\n\\n      calldataNegativeOffset += dataPackageByteSize;\\n    }\\n  }\\n\\n  function _getDataPackageByteSize(uint256 calldataNegativeOffset) internal pure returns (uint256) {\\n    (\\n      uint256 dataPointsCount,\\n      uint256 eachDataPointValueByteSize\\n    ) = _extractDataPointsDetailsForDataPackage(calldataNegativeOffset);\\n\\n    return\\n      dataPointsCount *\\n      (DATA_POINT_SYMBOL_BS + eachDataPointValueByteSize) +\\n      DATA_PACKAGE_WITHOUT_DATA_POINTS_BS;\\n  }\\n\\n  function _extractByteSizeOfUnsignedMetadata() internal pure returns (uint256) {\\n    // Checking if the calldata ends with the RedStone marker\\n    bool hasValidRedstoneMarker;\\n    assembly {\\n      let calldataLast32Bytes := calldataload(sub(calldatasize(), STANDARD_SLOT_BS))\\n      hasValidRedstoneMarker := eq(\\n        REDSTONE_MARKER_MASK,\\n        and(calldataLast32Bytes, REDSTONE_MARKER_MASK)\\n      )\\n    }\\n    if (!hasValidRedstoneMarker) {\\n      revert CalldataMustHaveValidPayload();\\n    }\\n\\n    // Using uint24, because unsigned metadata byte size number has 3 bytes\\n    uint24 unsignedMetadataByteSize;\\n    if (REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS > msg.data.length) {\\n      revert CalldataOverOrUnderFlow();\\n    }\\n    assembly {\\n      unsignedMetadataByteSize := calldataload(\\n        sub(calldatasize(), REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS)\\n      )\\n    }\\n    uint256 calldataNegativeOffset = unsignedMetadataByteSize\\n      + UNSIGNED_METADATA_BYTE_SIZE_BS\\n      + REDSTONE_MARKER_BS;\\n    if (calldataNegativeOffset + DATA_PACKAGES_COUNT_BS > msg.data.length) {\\n      revert IncorrectUnsignedMetadataSize();\\n    }\\n    return calldataNegativeOffset;\\n  }\\n\\n  // We return uint16, because unsigned metadata byte size number has 2 bytes\\n  function _extractDataPackagesCountFromCalldata(uint256 calldataNegativeOffset)\\n    internal\\n    pure\\n    returns (uint16 dataPackagesCount)\\n  {\\n    uint256 calldataNegativeOffsetWithStandardSlot = calldataNegativeOffset + STANDARD_SLOT_BS;\\n    if (calldataNegativeOffsetWithStandardSlot > msg.data.length) {\\n      revert CalldataOverOrUnderFlow();\\n    }\\n    assembly {\\n      dataPackagesCount := calldataload(\\n        sub(calldatasize(), calldataNegativeOffsetWithStandardSlot)\\n      )\\n    }\\n    return dataPackagesCount;\\n  }\\n\\n  function _extractDataPointValueAndDataFeedId(\\n    uint256 calldataNegativeOffsetForDataPackage,\\n    uint256 defaultDataPointValueByteSize,\\n    uint256 dataPointIndex\\n  ) internal pure virtual returns (bytes32 dataPointDataFeedId, uint256 dataPointValue) {\\n    uint256 negativeOffsetToDataPoints = calldataNegativeOffsetForDataPackage + DATA_PACKAGE_WITHOUT_DATA_POINTS_BS;\\n    uint256 dataPointNegativeOffset = negativeOffsetToDataPoints.add(\\n      (1 + dataPointIndex).mul((defaultDataPointValueByteSize + DATA_POINT_SYMBOL_BS))\\n    );\\n    uint256 dataPointCalldataOffset = msg.data.length.sub(dataPointNegativeOffset);\\n    assembly {\\n      dataPointDataFeedId := calldataload(dataPointCalldataOffset)\\n      dataPointValue := calldataload(add(dataPointCalldataOffset, DATA_POINT_SYMBOL_BS))\\n    }\\n  }\\n\\n  function _extractDataPointsDetailsForDataPackage(uint256 calldataNegativeOffsetForDataPackage)\\n    internal\\n    pure\\n    returns (uint256 dataPointsCount, uint256 eachDataPointValueByteSize)\\n  {\\n    // Using uint24, because data points count byte size number has 3 bytes\\n    uint24 dataPointsCount_;\\n\\n    // Using uint32, because data point value byte size has 4 bytes\\n    uint32 eachDataPointValueByteSize_;\\n\\n    // Extract data points count\\n    uint256 negativeCalldataOffset = calldataNegativeOffsetForDataPackage + SIG_BS;\\n    uint256 calldataOffset = msg.data.length.sub(negativeCalldataOffset + STANDARD_SLOT_BS);\\n    assembly {\\n      dataPointsCount_ := calldataload(calldataOffset)\\n    }\\n\\n    // Extract each data point value size\\n    calldataOffset = calldataOffset.sub(DATA_POINTS_COUNT_BS);\\n    assembly {\\n      eachDataPointValueByteSize_ := calldataload(calldataOffset)\\n    }\\n\\n    // Prepare returned values\\n    dataPointsCount = dataPointsCount_;\\n    eachDataPointValueByteSize = eachDataPointValueByteSize_;\\n  }\\n}\\n\",\"keccak256\":\"0x7a381362d355b7c2eff8cf9a2b0e0836d7b7c950b32f0fb65f1e4fc43c0c7379\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneConstants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title The base contract with helpful constants\\n * @author The Redstone Oracles team\\n * @dev It mainly contains redstone-related values, which improve readability\\n * of other contracts (e.g. CalldataExtractor and RedstoneConsumerBase)\\n */\\ncontract RedstoneConstants {\\n  // === Abbreviations ===\\n  // BS - Bytes size\\n  // PTR - Pointer (memory location)\\n  // SIG - Signature\\n\\n  // Solidity and YUL constants\\n  uint256 internal constant STANDARD_SLOT_BS = 32;\\n  uint256 internal constant FREE_MEMORY_PTR = 0x40;\\n  uint256 internal constant BYTES_ARR_LEN_VAR_BS = 32;\\n  uint256 internal constant FUNCTION_SIGNATURE_BS = 4;\\n  uint256 internal constant REVERT_MSG_OFFSET = 68; // Revert message structure described here: https://ethereum.stackexchange.com/a/66173/106364\\n  uint256 internal constant STRING_ERR_MESSAGE_MASK = 0x08c379a000000000000000000000000000000000000000000000000000000000;\\n\\n  // RedStone protocol consts\\n  uint256 internal constant SIG_BS = 65;\\n  uint256 internal constant TIMESTAMP_BS = 6;\\n  uint256 internal constant DATA_PACKAGES_COUNT_BS = 2;\\n  uint256 internal constant DATA_POINTS_COUNT_BS = 3;\\n  uint256 internal constant DATA_POINT_VALUE_BYTE_SIZE_BS = 4;\\n  uint256 internal constant DATA_POINT_SYMBOL_BS = 32;\\n  uint256 internal constant DEFAULT_DATA_POINT_VALUE_BS = 32;\\n  uint256 internal constant UNSIGNED_METADATA_BYTE_SIZE_BS = 3;\\n  uint256 internal constant REDSTONE_MARKER_BS = 9; // byte size of 0x000002ed57011e0000\\n  uint256 internal constant REDSTONE_MARKER_MASK = 0x0000000000000000000000000000000000000000000000000002ed57011e0000;\\n\\n  // Derived values (based on consts)\\n  uint256 internal constant TIMESTAMP_NEGATIVE_OFFSET_IN_DATA_PACKAGE_WITH_STANDARD_SLOT_BS = 104; // SIG_BS + DATA_POINTS_COUNT_BS + DATA_POINT_VALUE_BYTE_SIZE_BS + STANDARD_SLOT_BS\\n  uint256 internal constant DATA_PACKAGE_WITHOUT_DATA_POINTS_BS = 78; // DATA_POINT_VALUE_BYTE_SIZE_BS + TIMESTAMP_BS + DATA_POINTS_COUNT_BS + SIG_BS\\n  uint256 internal constant DATA_PACKAGE_WITHOUT_DATA_POINTS_AND_SIG_BS = 13; // DATA_POINT_VALUE_BYTE_SIZE_BS + TIMESTAMP_BS + DATA_POINTS_COUNT_BS\\n  uint256 internal constant REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS = 41; // REDSTONE_MARKER_BS + STANDARD_SLOT_BS\\n\\n  // Error messages\\n  error CalldataOverOrUnderFlow();\\n  error IncorrectUnsignedMetadataSize();\\n  error InsufficientNumberOfUniqueSigners(uint256 receivedSignersCount, uint256 requiredSignersCount);\\n  error EachSignerMustProvideTheSameValue();\\n  error EmptyCalldataPointersArr();\\n  error InvalidCalldataPointer();\\n  error CalldataMustHaveValidPayload();\\n  error SignerNotAuthorised(address receivedSigner);\\n}\\n\",\"keccak256\":\"0x82ab78ed59f4a811f5ab5c32064099235d753f98df42c087476ddabbf0348f21\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"./RedstoneConstants.sol\\\";\\nimport \\\"./RedstoneDefaultsLib.sol\\\";\\nimport \\\"./CalldataExtractor.sol\\\";\\nimport \\\"../libs/BitmapLib.sol\\\";\\nimport \\\"../libs/SignatureLib.sol\\\";\\n\\n/**\\n * @title The base contract with the main Redstone logic\\n * @author The Redstone Oracles team\\n * @dev Do not use this contract directly in consumer contracts, take a\\n * look at `RedstoneConsumerNumericBase` and `RedstoneConsumerBytesBase` instead\\n */\\nabstract contract RedstoneConsumerBase is CalldataExtractor {\\n  using SafeMath for uint256;\\n\\n  error GetDataServiceIdNotImplemented();\\n\\n  /* ========== VIRTUAL FUNCTIONS (MAY BE OVERRIDDEN IN CHILD CONTRACTS) ========== */\\n\\n  /**\\n   * @dev This function must be implemented by the child consumer contract.\\n   * It should return dataServiceId which DataServiceWrapper will use if not provided explicitly .\\n   * If not overridden, value will always have to be provided explicitly in DataServiceWrapper.\\n   * @return dataServiceId being consumed by contract\\n   */\\n  function getDataServiceId() public view virtual returns (string memory) {\\n    revert GetDataServiceIdNotImplemented();\\n  }\\n\\n  /**\\n   * @dev This function must be implemented by the child consumer contract.\\n   * It should return a unique index for a given signer address if the signer\\n   * is authorised, otherwise it should revert\\n   * @param receivedSigner The address of a signer, recovered from ECDSA signature\\n   * @return Unique index for a signer in the range [0..255]\\n   */\\n  function getAuthorisedSignerIndex(address receivedSigner) public view virtual returns (uint8);\\n\\n  /**\\n   * @dev This function may be overridden by the child consumer contract.\\n   * It should validate the timestamp against the current time (block.timestamp)\\n   * It should revert with a helpful message if the timestamp is not valid\\n   * @param receivedTimestampMilliseconds Timestamp extracted from calldata\\n   */\\n  function validateTimestamp(uint256 receivedTimestampMilliseconds) public view virtual {\\n    RedstoneDefaultsLib.validateTimestamp(receivedTimestampMilliseconds);\\n  }\\n\\n  /**\\n   * @dev This function should be overridden by the child consumer contract.\\n   * @return The minimum required value of unique authorised signers\\n   */\\n  function getUniqueSignersThreshold() public view virtual returns (uint8) {\\n    return 1;\\n  }\\n\\n  /**\\n   * @dev This function may be overridden by the child consumer contract.\\n   * It should aggregate values from different signers to a single uint value.\\n   * By default, it calculates the median value\\n   * @param values An array of uint256 values from different signers\\n   * @return Result of the aggregation in the form of a single number\\n   */\\n  function aggregateValues(uint256[] memory values) public view virtual returns (uint256) {\\n    return RedstoneDefaultsLib.aggregateValues(values);\\n  }\\n\\n  /* ========== FUNCTIONS WITH IMPLEMENTATION (CAN NOT BE OVERRIDDEN) ========== */\\n\\n  /**\\n   * @dev This is an internal helpful function for secure extraction oracle values\\n   * from the tx calldata. Security is achieved by signatures verification, timestamp\\n   * validation, and aggregating values from different authorised signers into a\\n   * single numeric value. If any of the required conditions (e.g. too old timestamp or\\n   * insufficient number of authorised signers) do not match, the function will revert.\\n   *\\n   * Note! You should not call this function in a consumer contract. You can use\\n   * `getOracleNumericValuesFromTxMsg` or `getOracleNumericValueFromTxMsg` instead.\\n   *\\n   * @param dataFeedIds An array of unique data feed identifiers\\n   * @return An array of the extracted and verified oracle values in the same order\\n   * as they are requested in dataFeedIds array\\n   */\\n  function _securelyExtractOracleValuesFromTxMsg(bytes32[] memory dataFeedIds)\\n    internal\\n    view\\n    returns (uint256[] memory)\\n  {\\n    // Initializing helpful variables and allocating memory\\n    uint256[] memory uniqueSignerCountForDataFeedIds = new uint256[](dataFeedIds.length);\\n    uint256[] memory signersBitmapForDataFeedIds = new uint256[](dataFeedIds.length);\\n    uint256[][] memory valuesForDataFeeds = new uint256[][](dataFeedIds.length);\\n    for (uint256 i = 0; i < dataFeedIds.length; i++) {\\n      // The line below is commented because newly allocated arrays are filled with zeros\\n      // But we left it for better readability\\n      // signersBitmapForDataFeedIds[i] = 0; // <- setting to an empty bitmap\\n      valuesForDataFeeds[i] = new uint256[](getUniqueSignersThreshold());\\n    }\\n\\n    // Extracting the number of data packages from calldata\\n    uint256 calldataNegativeOffset = _extractByteSizeOfUnsignedMetadata();\\n    uint256 dataPackagesCount = _extractDataPackagesCountFromCalldata(calldataNegativeOffset);\\n    calldataNegativeOffset += DATA_PACKAGES_COUNT_BS;\\n\\n    // Saving current free memory pointer\\n    uint256 freeMemPtr;\\n    assembly {\\n      freeMemPtr := mload(FREE_MEMORY_PTR)\\n    }\\n\\n    // Data packages extraction in a loop\\n    for (uint256 dataPackageIndex = 0; dataPackageIndex < dataPackagesCount; dataPackageIndex++) {\\n      // Extract data package details and update calldata offset\\n      uint256 dataPackageByteSize = _extractDataPackage(\\n        dataFeedIds,\\n        uniqueSignerCountForDataFeedIds,\\n        signersBitmapForDataFeedIds,\\n        valuesForDataFeeds,\\n        calldataNegativeOffset\\n      );\\n      calldataNegativeOffset += dataPackageByteSize;\\n\\n      // Shifting memory pointer back to the \\\"safe\\\" value\\n      assembly {\\n        mstore(FREE_MEMORY_PTR, freeMemPtr)\\n      }\\n    }\\n\\n    // Validating numbers of unique signers and calculating aggregated values for each dataFeedId\\n    return _getAggregatedValues(valuesForDataFeeds, uniqueSignerCountForDataFeedIds);\\n  }\\n\\n  /**\\n   * @dev This is a private helpful function, which extracts data for a data package based\\n   * on the given negative calldata offset, verifies them, and in the case of successful\\n   * verification updates the corresponding data package values in memory\\n   *\\n   * @param dataFeedIds an array of unique data feed identifiers\\n   * @param uniqueSignerCountForDataFeedIds an array with the numbers of unique signers\\n   * for each data feed\\n   * @param signersBitmapForDataFeedIds an array of signer bitmaps for data feeds\\n   * @param valuesForDataFeeds 2-dimensional array, valuesForDataFeeds[i][j] contains\\n   * j-th value for the i-th data feed\\n   * @param calldataNegativeOffset negative calldata offset for the given data package\\n   *\\n   * @return An array of the aggregated values\\n   */\\n  function _extractDataPackage(\\n    bytes32[] memory dataFeedIds,\\n    uint256[] memory uniqueSignerCountForDataFeedIds,\\n    uint256[] memory signersBitmapForDataFeedIds,\\n    uint256[][] memory valuesForDataFeeds,\\n    uint256 calldataNegativeOffset\\n  ) private view returns (uint256) {\\n    uint256 signerIndex;\\n\\n    (\\n      uint256 dataPointsCount,\\n      uint256 eachDataPointValueByteSize\\n    ) = _extractDataPointsDetailsForDataPackage(calldataNegativeOffset);\\n\\n    // We use scopes to resolve problem with too deep stack\\n    {\\n      uint48 extractedTimestamp;\\n      address signerAddress;\\n      bytes32 signedHash;\\n      bytes memory signedMessage;\\n      uint256 signedMessageBytesCount;\\n\\n      signedMessageBytesCount = dataPointsCount.mul(eachDataPointValueByteSize + DATA_POINT_SYMBOL_BS)\\n        + DATA_PACKAGE_WITHOUT_DATA_POINTS_AND_SIG_BS; //DATA_POINT_VALUE_BYTE_SIZE_BS + TIMESTAMP_BS + DATA_POINTS_COUNT_BS\\n\\n      uint256 timestampCalldataOffset = msg.data.length.sub(\\n        calldataNegativeOffset + TIMESTAMP_NEGATIVE_OFFSET_IN_DATA_PACKAGE_WITH_STANDARD_SLOT_BS);\\n\\n      uint256 signedMessageCalldataOffset = msg.data.length.sub(\\n        calldataNegativeOffset + SIG_BS + signedMessageBytesCount);\\n\\n      assembly {\\n        // Extracting the signed message\\n        signedMessage := extractBytesFromCalldata(\\n          signedMessageCalldataOffset,\\n          signedMessageBytesCount\\n        )\\n\\n        // Hashing the signed message\\n        signedHash := keccak256(add(signedMessage, BYTES_ARR_LEN_VAR_BS), signedMessageBytesCount)\\n\\n        // Extracting timestamp\\n        extractedTimestamp := calldataload(timestampCalldataOffset)\\n\\n        function initByteArray(bytesCount) -> ptr {\\n          ptr := mload(FREE_MEMORY_PTR)\\n          mstore(ptr, bytesCount)\\n          ptr := add(ptr, BYTES_ARR_LEN_VAR_BS)\\n          mstore(FREE_MEMORY_PTR, add(ptr, bytesCount))\\n        }\\n\\n        function extractBytesFromCalldata(offset, bytesCount) -> extractedBytes {\\n          let extractedBytesStartPtr := initByteArray(bytesCount)\\n          calldatacopy(\\n            extractedBytesStartPtr,\\n            offset,\\n            bytesCount\\n          )\\n          extractedBytes := sub(extractedBytesStartPtr, BYTES_ARR_LEN_VAR_BS)\\n        }\\n      }\\n\\n      // Validating timestamp\\n      validateTimestamp(extractedTimestamp);\\n\\n      // Verifying the off-chain signature against on-chain hashed data\\n      signerAddress = SignatureLib.recoverSignerAddress(\\n        signedHash,\\n        calldataNegativeOffset + SIG_BS\\n      );\\n      signerIndex = getAuthorisedSignerIndex(signerAddress);\\n    }\\n\\n    // Updating helpful arrays\\n    {\\n      bytes32 dataPointDataFeedId;\\n      uint256 dataPointValue;\\n      for (uint256 dataPointIndex = 0; dataPointIndex < dataPointsCount; dataPointIndex++) {\\n        // Extracting data feed id and value for the current data point\\n        (dataPointDataFeedId, dataPointValue) = _extractDataPointValueAndDataFeedId(\\n          calldataNegativeOffset,\\n          eachDataPointValueByteSize,\\n          dataPointIndex\\n        );\\n\\n        for (\\n          uint256 dataFeedIdIndex = 0;\\n          dataFeedIdIndex < dataFeedIds.length;\\n          dataFeedIdIndex++\\n        ) {\\n          if (dataPointDataFeedId == dataFeedIds[dataFeedIdIndex]) {\\n            uint256 bitmapSignersForDataFeedId = signersBitmapForDataFeedIds[dataFeedIdIndex];\\n\\n            if (\\n              !BitmapLib.getBitFromBitmap(bitmapSignersForDataFeedId, signerIndex) && /* current signer was not counted for current dataFeedId */\\n              uniqueSignerCountForDataFeedIds[dataFeedIdIndex] < getUniqueSignersThreshold()\\n            ) {\\n              // Increase unique signer counter\\n              uniqueSignerCountForDataFeedIds[dataFeedIdIndex]++;\\n\\n              // Add new value\\n              valuesForDataFeeds[dataFeedIdIndex][\\n                uniqueSignerCountForDataFeedIds[dataFeedIdIndex] - 1\\n              ] = dataPointValue;\\n\\n              // Update signers bitmap\\n              signersBitmapForDataFeedIds[dataFeedIdIndex] = BitmapLib.setBitInBitmap(\\n                bitmapSignersForDataFeedId,\\n                signerIndex\\n              );\\n            }\\n\\n            // Breaking, as there couldn't be several indexes for the same feed ID\\n            break;\\n          }\\n        }\\n      }\\n    }\\n\\n    // Return total data package byte size\\n    return\\n      DATA_PACKAGE_WITHOUT_DATA_POINTS_BS +\\n      (eachDataPointValueByteSize + DATA_POINT_SYMBOL_BS) *\\n      dataPointsCount;\\n  }\\n\\n  /**\\n   * @dev This is a private helpful function, which aggregates values from different\\n   * authorised signers for the given arrays of values for each data feed\\n   *\\n   * @param valuesForDataFeeds 2-dimensional array, valuesForDataFeeds[i][j] contains\\n   * j-th value for the i-th data feed\\n   * @param uniqueSignerCountForDataFeedIds an array with the numbers of unique signers\\n   * for each data feed\\n   *\\n   * @return An array of the aggregated values\\n   */\\n  function _getAggregatedValues(\\n    uint256[][] memory valuesForDataFeeds,\\n    uint256[] memory uniqueSignerCountForDataFeedIds\\n  ) private view returns (uint256[] memory) {\\n    uint256[] memory aggregatedValues = new uint256[](valuesForDataFeeds.length);\\n    uint256 uniqueSignersThreshold = getUniqueSignersThreshold();\\n\\n    for (uint256 dataFeedIndex = 0; dataFeedIndex < valuesForDataFeeds.length; dataFeedIndex++) {\\n      if (uniqueSignerCountForDataFeedIds[dataFeedIndex] < uniqueSignersThreshold) {\\n        revert InsufficientNumberOfUniqueSigners(\\n          uniqueSignerCountForDataFeedIds[dataFeedIndex],\\n          uniqueSignersThreshold);\\n      }\\n      uint256 aggregatedValueForDataFeedId = aggregateValues(valuesForDataFeeds[dataFeedIndex]);\\n      aggregatedValues[dataFeedIndex] = aggregatedValueForDataFeedId;\\n    }\\n\\n    return aggregatedValues;\\n  }\\n}\\n\",\"keccak256\":\"0x9f67e176ef49bc988486de896bddce913dc0679b6f3f2cf9fd9803e683927d42\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneConsumerNumericBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./RedstoneConsumerBase.sol\\\";\\n\\n/**\\n * @title The base contract for Redstone consumers' contracts that allows to\\n * securely calculate numeric redstone oracle values\\n * @author The Redstone Oracles team\\n * @dev This contract can extend other contracts to allow them\\n * securely fetch Redstone oracle data from transactions calldata\\n */\\nabstract contract RedstoneConsumerNumericBase is RedstoneConsumerBase {\\n  /**\\n   * @dev This function can be used in a consumer contract to securely extract an\\n   * oracle value for a given data feed id. Security is achieved by\\n   * signatures verification, timestamp validation, and aggregating values\\n   * from different authorised signers into a single numeric value. If any of the\\n   * required conditions do not match, the function will revert.\\n   * Note! This function expects that tx calldata contains redstone payload in the end\\n   * Learn more about redstone payload here: https://github.com/redstone-finance/redstone-oracles-monorepo/tree/main/packages/evm-connector#readme\\n   * @param dataFeedId bytes32 value that uniquely identifies the data feed\\n   * @return Extracted and verified numeric oracle value for the given data feed id\\n   */\\n  function getOracleNumericValueFromTxMsg(bytes32 dataFeedId)\\n    internal\\n    view\\n    virtual\\n    returns (uint256)\\n  {\\n    bytes32[] memory dataFeedIds = new bytes32[](1);\\n    dataFeedIds[0] = dataFeedId;\\n    return getOracleNumericValuesFromTxMsg(dataFeedIds)[0];\\n  }\\n\\n  /**\\n   * @dev This function can be used in a consumer contract to securely extract several\\n   * numeric oracle values for a given array of data feed ids. Security is achieved by\\n   * signatures verification, timestamp validation, and aggregating values\\n   * from different authorised signers into a single numeric value. If any of the\\n   * required conditions do not match, the function will revert.\\n   * Note! This function expects that tx calldata contains redstone payload in the end\\n   * Learn more about redstone payload here: https://github.com/redstone-finance/redstone-oracles-monorepo/tree/main/packages/evm-connector#readme\\n   * @param dataFeedIds An array of unique data feed identifiers\\n   * @return An array of the extracted and verified oracle values in the same order\\n   * as they are requested in the dataFeedIds array\\n   */\\n  function getOracleNumericValuesFromTxMsg(bytes32[] memory dataFeedIds)\\n    internal\\n    view\\n    virtual\\n    returns (uint256[] memory)\\n  {\\n    return _securelyExtractOracleValuesFromTxMsg(dataFeedIds);\\n  }\\n\\n  /**\\n   * @dev This function works similarly to the `getOracleNumericValuesFromTxMsg` with the\\n   * only difference that it allows to request oracle data for an array of data feeds\\n   * that may contain duplicates\\n   * \\n   * @param dataFeedIdsWithDuplicates An array of data feed identifiers (duplicates are allowed)\\n   * @return An array of the extracted and verified oracle values in the same order\\n   * as they are requested in the dataFeedIdsWithDuplicates array\\n   */\\n  function getOracleNumericValuesWithDuplicatesFromTxMsg(bytes32[] memory dataFeedIdsWithDuplicates) internal view returns (uint256[] memory) {\\n    // Building an array without duplicates\\n    bytes32[] memory dataFeedIdsWithoutDuplicates = new bytes32[](dataFeedIdsWithDuplicates.length);\\n    bool alreadyIncluded;\\n    uint256 uniqueDataFeedIdsCount = 0;\\n\\n    for (uint256 indexWithDup = 0; indexWithDup < dataFeedIdsWithDuplicates.length; indexWithDup++) {\\n      // Checking if current element is already included in `dataFeedIdsWithoutDuplicates`\\n      alreadyIncluded = false;\\n      for (uint256 indexWithoutDup = 0; indexWithoutDup < uniqueDataFeedIdsCount; indexWithoutDup++) {\\n        if (dataFeedIdsWithoutDuplicates[indexWithoutDup] == dataFeedIdsWithDuplicates[indexWithDup]) {\\n          alreadyIncluded = true;\\n          break;\\n        }\\n      }\\n\\n      // Adding if not included\\n      if (!alreadyIncluded) {\\n        dataFeedIdsWithoutDuplicates[uniqueDataFeedIdsCount] = dataFeedIdsWithDuplicates[indexWithDup];\\n        uniqueDataFeedIdsCount++;\\n      }\\n    }\\n\\n    // Overriding dataFeedIdsWithoutDuplicates.length\\n    // Equivalent to: dataFeedIdsWithoutDuplicates.length = uniqueDataFeedIdsCount;\\n    assembly {\\n      mstore(dataFeedIdsWithoutDuplicates, uniqueDataFeedIdsCount)\\n    }\\n\\n    // Requesting oracle values (without duplicates)\\n    uint256[] memory valuesWithoutDuplicates = getOracleNumericValuesFromTxMsg(dataFeedIdsWithoutDuplicates);\\n\\n    // Preparing result values array\\n    uint256[] memory valuesWithDuplicates = new uint256[](dataFeedIdsWithDuplicates.length);\\n    for (uint256 indexWithDup = 0; indexWithDup < dataFeedIdsWithDuplicates.length; indexWithDup++) {\\n      for (uint256 indexWithoutDup = 0; indexWithoutDup < dataFeedIdsWithoutDuplicates.length; indexWithoutDup++) {\\n        if (dataFeedIdsWithDuplicates[indexWithDup] == dataFeedIdsWithoutDuplicates[indexWithoutDup]) {\\n          valuesWithDuplicates[indexWithDup] = valuesWithoutDuplicates[indexWithoutDup];\\n          break;\\n        }\\n      }\\n    }\\n\\n    return valuesWithDuplicates;\\n  }\\n}\\n\",\"keccak256\":\"0xe8e70ed8bb3efc527dccaf5919587c7ff3980836256d7d8db8f632721a3cf956\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneDefaultsLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"../libs/NumericArrayLib.sol\\\";\\n\\n/**\\n * @title Default implementations of virtual redstone consumer base functions\\n * @author The Redstone Oracles team\\n */\\nlibrary RedstoneDefaultsLib {\\n  uint256 constant DEFAULT_MAX_DATA_TIMESTAMP_DELAY_SECONDS = 3 minutes;\\n  uint256 constant DEFAULT_MAX_DATA_TIMESTAMP_AHEAD_SECONDS = 1 minutes;\\n\\n  error TimestampFromTooLongFuture(uint256 receivedTimestampSeconds, uint256 blockTimestamp);\\n  error TimestampIsTooOld(uint256 receivedTimestampSeconds, uint256 blockTimestamp);\\n\\n  function validateTimestamp(uint256 receivedTimestampMilliseconds) internal view {\\n    // Getting data timestamp from future seems quite unlikely\\n    // But we've already spent too much time with different cases\\n    // Where block.timestamp was less than dataPackage.timestamp.\\n    // Some blockchains may case this problem as well.\\n    // That's why we add MAX_BLOCK_TIMESTAMP_DELAY\\n    // and allow data \\\"from future\\\" but with a small delay\\n    uint256 receivedTimestampSeconds = receivedTimestampMilliseconds / 1000;\\n\\n    if (block.timestamp < receivedTimestampSeconds) {\\n      if ((receivedTimestampSeconds - block.timestamp) > DEFAULT_MAX_DATA_TIMESTAMP_AHEAD_SECONDS) {\\n        revert TimestampFromTooLongFuture(receivedTimestampSeconds, block.timestamp);\\n      }\\n    } else if ((block.timestamp - receivedTimestampSeconds) > DEFAULT_MAX_DATA_TIMESTAMP_DELAY_SECONDS) {\\n      revert TimestampIsTooOld(receivedTimestampSeconds, block.timestamp);\\n    }\\n  }\\n\\n  function aggregateValues(uint256[] memory values) internal pure returns (uint256) {\\n    return NumericArrayLib.pickMedian(values);\\n  }\\n}\\n\",\"keccak256\":\"0xe39ee1618d15944d6f44918f02f71d0d604fb678dbdbf36ca1eeecc86858ff25\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/libs/BitmapLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nlibrary BitmapLib {\\n  function setBitInBitmap(uint256 bitmap, uint256 bitIndex) internal pure returns (uint256) {\\n    return bitmap | (1 << bitIndex);\\n  }\\n\\n  function getBitFromBitmap(uint256 bitmap, uint256 bitIndex) internal pure returns (bool) {\\n    uint256 bitAtIndex = bitmap & (1 << bitIndex);\\n    return bitAtIndex > 0;\\n  }\\n}\\n\",\"keccak256\":\"0x9762198cae997eebad303a7a43a6133908646ed30811285085c9ea9cbd2a5e07\",\"license\":\"MIT\"},\"@redstone-finance/evm-connector/contracts/libs/NumericArrayLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nlibrary NumericArrayLib {\\n  // This function sort array in memory using bubble sort algorithm,\\n  // which performs even better than quick sort for small arrays\\n\\n  uint256 constant BYTES_ARR_LEN_VAR_BS = 32;\\n  uint256 constant UINT256_VALUE_BS = 32;\\n\\n  error CanNotPickMedianOfEmptyArray();\\n\\n  // This function modifies the array\\n  function pickMedian(uint256[] memory arr) internal pure returns (uint256) {\\n    if (arr.length == 0) {\\n      revert CanNotPickMedianOfEmptyArray();\\n    }\\n    sort(arr);\\n    uint256 middleIndex = arr.length / 2;\\n    if (arr.length % 2 == 0) {\\n      uint256 sum = SafeMath.add(arr[middleIndex - 1], arr[middleIndex]);\\n      return sum / 2;\\n    } else {\\n      return arr[middleIndex];\\n    }\\n  }\\n\\n  function sort(uint256[] memory arr) internal pure {\\n    assembly {\\n      let arrLength := mload(arr)\\n      let valuesPtr := add(arr, BYTES_ARR_LEN_VAR_BS)\\n      let endPtr := add(valuesPtr, mul(arrLength, UINT256_VALUE_BS))\\n      for {\\n        let arrIPtr := valuesPtr\\n      } lt(arrIPtr, endPtr) {\\n        arrIPtr := add(arrIPtr, UINT256_VALUE_BS) // arrIPtr += 32\\n      } {\\n        for {\\n          let arrJPtr := valuesPtr\\n        } lt(arrJPtr, arrIPtr) {\\n          arrJPtr := add(arrJPtr, UINT256_VALUE_BS) // arrJPtr += 32\\n        } {\\n          let arrI := mload(arrIPtr)\\n          let arrJ := mload(arrJPtr)\\n          if lt(arrI, arrJ) {\\n            mstore(arrIPtr, arrJ)\\n            mstore(arrJPtr, arrI)\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x9b1a3a433a450cbe90e85801ddf891ab26deeda02d45a2d67e24443cdc33e764\",\"license\":\"MIT\"},\"@redstone-finance/evm-connector/contracts/libs/SignatureLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nlibrary SignatureLib {\\n  uint256 constant ECDSA_SIG_R_BS = 32;\\n  uint256 constant ECDSA_SIG_S_BS = 32;\\n\\n  function recoverSignerAddress(bytes32 signedHash, uint256 signatureCalldataNegativeOffset)\\n    internal\\n    pure\\n    returns (address)\\n  {\\n    bytes32 r;\\n    bytes32 s;\\n    uint8 v;\\n    assembly {\\n      let signatureCalldataStartPos := sub(calldatasize(), signatureCalldataNegativeOffset)\\n      r := calldataload(signatureCalldataStartPos)\\n      signatureCalldataStartPos := add(signatureCalldataStartPos, ECDSA_SIG_R_BS)\\n      s := calldataload(signatureCalldataStartPos)\\n      signatureCalldataStartPos := add(signatureCalldataStartPos, ECDSA_SIG_S_BS)\\n      v := byte(0, calldataload(signatureCalldataStartPos)) // last byte of the signature memory array\\n    }\\n    return ecrecover(signedHash, v, r, s);\\n  }\\n}\\n\",\"keccak256\":\"0x06037b440e5eab52d550718543c463da00ac7231f303a503178ad5191e154310\",\"license\":\"MIT\"},\"contracts/RedStoneBaseContracts/redstone-oracles-monorepo/packages/on-chain-relayer/contracts/core/IRedstoneAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.14;\\n\\n/**\\n * @title Interface of RedStone adapter\\n * @author The Redstone Oracles team\\n */\\ninterface IRedstoneAdapter {\\n\\n  /**\\n   * @notice Updates values of all data feeds supported by the Adapter contract\\n   * @dev This function requires an attached redstone payload to the transaction calldata.\\n   * It also requires each data package to have exactly the same timestamp\\n   * @param dataPackagesTimestamp Timestamp of each signed data package in the redstone payload\\n   */\\n  function updateDataFeedsValues(uint256 dataPackagesTimestamp) external;\\n\\n\\n  /**\\n   * @notice Returns the latest properly reported value of the data feed\\n   * @param dataFeedId The identifier of the requested data feed\\n   * @return value The latest value of the given data feed\\n   */\\n  function getValueForDataFeed(bytes32 dataFeedId) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the latest properly reported values for several data feeds\\n   * @param requestedDataFeedIds The array of identifiers for the requested feeds\\n   * @return values Values of the requested data feeds in the corresponding order\\n   */\\n  function getValuesForDataFeeds(bytes32[] memory requestedDataFeedIds) external view returns (uint256[] memory);\\n\\n  /**\\n   * @notice Returns data timestamp from the latest update\\n   * @dev It's virtual, because its implementation can sometimes be different\\n   * (e.g. SinglePriceFeedAdapterWithClearing)\\n   * @return lastDataTimestamp Timestamp of the latest reported data packages\\n   */\\n  function getDataTimestampFromLatestUpdate() external view returns (uint256 lastDataTimestamp);\\n\\n  /**\\n   * @notice Returns block timestamp of the latest successful update\\n   * @return blockTimestamp The block timestamp of the latest successful update\\n   */\\n  function getBlockTimestampFromLatestUpdate() external view returns (uint256 blockTimestamp);\\n\\n\\n  /**\\n   * @notice Returns timestamps of the latest successful update\\n   * @return dataTimestamp timestamp (usually in milliseconds) from the signed data packages\\n   * @return blockTimestamp timestamp of the block when the update has happened\\n   */\\n  function getTimestampsFromLatestUpdate() external view returns (uint128 dataTimestamp, uint128 blockTimestamp);\\n\\n  /**\\n   * @notice Returns identifiers of all data feeds supported by the Adapter contract\\n   * @return An array of data feed identifiers\\n   */\\n  function getDataFeedIds() external view returns (bytes32[] memory);\\n\\n  /**\\n   * @notice Returns the unique index of the given data feed\\n   * @param dataFeedId The data feed identifier\\n   * @return index The index of the data feed\\n   */\\n  function getDataFeedIndex(bytes32 dataFeedId) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns minimal required interval (usually in seconds) between subsequent updates\\n   * @return interval The required interval between updates\\n   */\\n  function getMinIntervalBetweenUpdates() external view returns (uint256);\\n\\n  /**\\n   * @notice Reverts if the proposed timestamp of data packages it too old or too new\\n   * comparing to the block.timestamp. It also ensures that the proposed timestamp is newer\\n   * Then the one from the previous update\\n   * @param dataPackagesTimestamp The proposed timestamp (usually in milliseconds)\\n   */\\n  function validateProposedDataPackagesTimestamp(uint256 dataPackagesTimestamp) external view;\\n\\n  /**\\n   * @notice Reverts if the updater is not authorised\\n   * @dev This function should revert if msg.sender is not allowed to update data feed values\\n   * @param updater The address of the proposed updater\\n   */\\n  function requireAuthorisedUpdater(address updater) external view;\\n}\\n\",\"keccak256\":\"0xcccac4cb64d14e8ba62915ee465b875b59b2de14977512c7f16370d52f94288f\",\"license\":\"BUSL-1.1\"},\"contracts/RedStoneBaseContracts/redstone-oracles-monorepo/packages/on-chain-relayer/contracts/core/RedstoneAdapterBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.14;\\n\\nimport {RedstoneConsumerNumericBase, RedstoneDefaultsLib} from \\\"@redstone-finance/evm-connector/contracts/core/RedstoneConsumerNumericBase.sol\\\";\\nimport {IRedstoneAdapter} from \\\"./IRedstoneAdapter.sol\\\";\\n\\n/**\\n * @title Core logic of Redstone Adapter Contract\\n * @author The Redstone Oracles team\\n * @dev This contract is used to repeatedly push Redstone data to blockchain storage\\n * More details here: https://docs.redstone.finance/docs/smart-contract-devs/get-started/redstone-classic\\n *\\n * Key details about the contract:\\n * - Values for data feeds can be updated using the `updateDataFeedsValues` function\\n * - All data feeds must be updated within a single call, partial updates are not allowed\\n * - There is a configurable minimum interval between updates\\n * - Updaters can be restricted by overriding `requireAuthorisedUpdater` function\\n * - The contract is designed to force values validation, by default it prevents returning zero values\\n * - All data packages in redstone payload must have the same timestamp,\\n *    equal to `dataPackagesTimestamp` argument of the `updateDataFeedsValues` function\\n * - Block timestamp abstraction - even though we call it blockTimestamp in many places,\\n *    it's possible to have a custom logic here, e.g. use block number instead of a timestamp\\n */\\nabstract contract RedstoneAdapterBase is RedstoneConsumerNumericBase, IRedstoneAdapter {\\n  // We don't use storage variables to avoid potential problems with upgradable contracts\\n  bytes32 internal constant LATEST_UPDATE_TIMESTAMPS_STORAGE_LOCATION = 0x3d01e4d77237ea0f771f1786da4d4ff757fcba6a92933aa53b1dcef2d6bd6fe2; // keccak256(\\\"RedStone.lastUpdateTimestamp\\\");\\n  uint256 internal constant MIN_INTERVAL_BETWEEN_UPDATES = 3 seconds;\\n  uint256 internal constant BITS_COUNT_IN_16_BYTES = 128;\\n  uint256 internal constant MAX_NUMBER_FOR_128_BITS = 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff;\\n\\n  error DataTimestampShouldBeNewerThanBefore(\\n    uint256 receivedDataTimestampMilliseconds,\\n    uint256 lastDataTimestampMilliseconds\\n  );\\n\\n  error MinIntervalBetweenUpdatesHasNotPassedYet(\\n    uint256 currentBlockTimestamp,\\n    uint256 lastUpdateTimestamp,\\n    uint256 minIntervalBetweenUpdates\\n  );\\n\\n  error DataPackageTimestampMismatch(uint256 expectedDataTimestamp, uint256 dataPackageTimestamp);\\n\\n  error DataFeedValueCannotBeZero(bytes32 dataFeedId);\\n\\n  error DataFeedIdNotFound(bytes32 dataFeedId);\\n\\n  error DataTimestampIsTooBig(uint256 dataTimestamp);\\n\\n  error BlockTimestampIsTooBig(uint256 blockTimestamp);\\n\\n  /**\\n   * @notice Reverts if the updater is not authorised\\n   * @dev This function should revert if msg.sender is not allowed to update data feed values\\n   * @param updater The address of the proposed updater\\n   */\\n  function requireAuthorisedUpdater(address updater) public view virtual {\\n    // By default, anyone can update data feed values, but it can be overridden\\n  }\\n\\n  /**\\n   * @notice Returns identifiers of all data feeds supported by the Adapter contract\\n   * @dev this function must be implemented in derived contracts\\n   * @return An array of data feed identifiers\\n   */\\n  function getDataFeedIds() public view virtual returns (bytes32[] memory);\\n\\n  /**\\n   * @notice Returns the unique index of the given data feed\\n   * @dev This function can (and should) be overriden to reduce gas\\n   * costs of other functions\\n   * @param dataFeedId The data feed identifier\\n   * @return index The index of the data feed\\n   */\\n  function getDataFeedIndex(bytes32 dataFeedId) public view virtual returns (uint256) {\\n    bytes32[] memory dataFeedIds = getDataFeedIds();\\n    for (uint256 i = 0; i < dataFeedIds.length;) {\\n      if (dataFeedIds[i] == dataFeedId) {\\n        return i;\\n      }\\n      unchecked { i++; } // reduces gas costs\\n    }\\n    revert DataFeedIdNotFound(dataFeedId);\\n  }\\n\\n  /**\\n   * @notice Updates values of all data feeds supported by the Adapter contract\\n   * @dev This function requires an attached redstone payload to the transaction calldata.\\n   * It also requires each data package to have exactly the same timestamp\\n   * @param dataPackagesTimestamp Timestamp of each signed data package in the redstone payload\\n   */\\n  function updateDataFeedsValues(uint256 dataPackagesTimestamp) public {\\n    requireAuthorisedUpdater(msg.sender);\\n    _assertMinIntervalBetweenUpdatesPassed();\\n    validateProposedDataPackagesTimestamp(dataPackagesTimestamp);\\n    _saveTimestampsOfCurrentUpdate(dataPackagesTimestamp);\\n\\n    bytes32[] memory dataFeedsIdsArray = getDataFeedIds();\\n\\n    // It will trigger timestamp validation for each data package\\n    uint256[] memory oracleValues = getOracleNumericValuesFromTxMsg(dataFeedsIdsArray);\\n\\n    _validateAndUpdateDataFeedsValues(dataFeedsIdsArray, oracleValues);\\n  }\\n\\n  /**\\n   * @dev Note! This function is not called directly, it's called for each data package    .\\n   * in redstone payload and just verifies if each data package has the same timestamp\\n   * as the one that was saved in the storage\\n   * @param receivedTimestampMilliseconds Timestamp from a data package\\n   */\\n  function validateTimestamp(uint256 receivedTimestampMilliseconds) public view virtual override {\\n    // It means that we are in the special view context and we can skip validation of the\\n    // timestamp. It can be useful for calling view functions, as they can not modify the contract\\n    // state to pass the timestamp validation below\\n    if (msg.sender == address(0)) {\\n      return;\\n    }\\n\\n    uint256 expectedDataPackageTimestamp = getDataTimestampFromLatestUpdate();\\n    if (receivedTimestampMilliseconds != expectedDataPackageTimestamp) {\\n      revert DataPackageTimestampMismatch(\\n        expectedDataPackageTimestamp,\\n        receivedTimestampMilliseconds\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev This function should be implemented by the actual contract\\n   * and should contain the logic of values validation and reporting.\\n   * Usually, values reporting is based on saving them to the contract storage,\\n   * e.g. in PriceFeedsAdapter, but some custom implementations (e.g. GMX keeper adapter\\n   * or Mento Sorted Oracles adapter) may handle values updating in a different way\\n   * @param dataFeedIdsArray Array of the data feeds identifiers (it will always be all data feed ids)\\n   * @param values The reported values that should be validated and reported\\n   */\\n  function _validateAndUpdateDataFeedsValues(bytes32[] memory dataFeedIdsArray, uint256[] memory values) internal virtual;\\n\\n  /**\\n   * @dev This function reverts if not enough time passed since the latest update\\n   */\\n  function _assertMinIntervalBetweenUpdatesPassed() private view {\\n    uint256 currentBlockTimestamp = getBlockTimestamp();\\n    uint256 blockTimestampFromLatestUpdate = getBlockTimestampFromLatestUpdate();\\n    uint256 minIntervalBetweenUpdates = getMinIntervalBetweenUpdates();\\n    if (currentBlockTimestamp < blockTimestampFromLatestUpdate + minIntervalBetweenUpdates) {\\n      revert MinIntervalBetweenUpdatesHasNotPassedYet(\\n        currentBlockTimestamp,\\n        blockTimestampFromLatestUpdate,\\n        minIntervalBetweenUpdates\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns minimal required interval (usually in seconds) between subsequent updates\\n   * @dev You can override this function to change the required interval between udpates.\\n   * Please do not set it to 0, as it may open many attack vectors\\n   * @return interval The required interval between updates\\n   */\\n  function getMinIntervalBetweenUpdates() public view virtual returns (uint256) {\\n    return MIN_INTERVAL_BETWEEN_UPDATES;\\n  }\\n\\n  /**\\n   * @notice Reverts if the proposed timestamp of data packages it too old or too new\\n   * comparing to the block.timestamp. It also ensures that the proposed timestamp is newer\\n   * Then the one from the previous update\\n   * @param dataPackagesTimestamp The proposed timestamp (usually in milliseconds)\\n   */\\n  function validateProposedDataPackagesTimestamp(uint256 dataPackagesTimestamp) public view {\\n    _preventUpdateWithOlderDataPackages(dataPackagesTimestamp);\\n    validateDataPackagesTimestampOnce(dataPackagesTimestamp);\\n  }\\n\\n\\n  /**\\n   * @notice Reverts if the proposed timestamp of data packages it too old or too new\\n   * comparing to the current block timestamp\\n   * @param dataPackagesTimestamp The proposed timestamp (usually in milliseconds)\\n   */\\n  function validateDataPackagesTimestampOnce(uint256 dataPackagesTimestamp) public view virtual {\\n    uint256 receivedTimestampSeconds = dataPackagesTimestamp / 1000;\\n\\n    (uint256 maxDataAheadSeconds, uint256 maxDataDelaySeconds) = getAllowedTimestampDiffsInSeconds();\\n\\n    uint256 blockTimestamp = getBlockTimestamp();\\n\\n    if (blockTimestamp < receivedTimestampSeconds) {\\n      if ((receivedTimestampSeconds - blockTimestamp) > maxDataAheadSeconds) {\\n        revert RedstoneDefaultsLib.TimestampFromTooLongFuture(receivedTimestampSeconds, blockTimestamp);\\n      }\\n    } else if ((blockTimestamp - receivedTimestampSeconds) > maxDataDelaySeconds) {\\n      revert RedstoneDefaultsLib.TimestampIsTooOld(receivedTimestampSeconds, blockTimestamp);\\n    }\\n  }\\n\\n  /**\\n   * @dev This function can be overriden, e.g. to use block.number instead of block.timestamp\\n   * It can be useful in some L2 chains, as sometimes their different blocks can have the same timestamp\\n   * @return timestamp Timestamp or Block number or any other number that can identify time in the context\\n   * of the given blockchain\\n   */\\n  function getBlockTimestamp() public view virtual returns (uint256) {\\n    return block.timestamp;\\n  }\\n\\n  /**\\n   * @dev Helpful function for getting values for timestamp validation\\n   * @return  maxDataAheadSeconds Max allowed number of seconds ahead of block.timrstamp\\n   * @return  maxDataDelaySeconds Max allowed number of seconds for data delay\\n   */\\n  function getAllowedTimestampDiffsInSeconds() public view virtual returns (uint256 maxDataAheadSeconds, uint256 maxDataDelaySeconds) {\\n    maxDataAheadSeconds = RedstoneDefaultsLib.DEFAULT_MAX_DATA_TIMESTAMP_AHEAD_SECONDS;\\n    maxDataDelaySeconds = RedstoneDefaultsLib.DEFAULT_MAX_DATA_TIMESTAMP_DELAY_SECONDS;\\n  }\\n\\n  /**\\n   * @dev Reverts if proposed data packages are not newer than the ones used previously\\n   * @param dataPackagesTimestamp Timestamp od the data packages (usually in milliseconds)\\n   */\\n  function _preventUpdateWithOlderDataPackages(uint256 dataPackagesTimestamp) internal view {\\n    uint256 dataTimestampFromLatestUpdate = getDataTimestampFromLatestUpdate();\\n\\n    if (dataPackagesTimestamp <= dataTimestampFromLatestUpdate) {\\n      revert DataTimestampShouldBeNewerThanBefore(\\n        dataPackagesTimestamp,\\n        dataTimestampFromLatestUpdate\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns data timestamp from the latest update\\n   * @dev It's virtual, because its implementation can sometimes be different\\n   * (e.g. SinglePriceFeedAdapterWithClearing)\\n   * @return lastDataTimestamp Timestamp of the latest reported data packages\\n   */\\n  function getDataTimestampFromLatestUpdate() public view virtual returns (uint256 lastDataTimestamp) {\\n    (lastDataTimestamp, ) = getTimestampsFromLatestUpdate();\\n  }\\n\\n  /**\\n   * @notice Returns block timestamp of the latest successful update\\n   * @return blockTimestamp The block timestamp of the latest successful update\\n   */\\n  function getBlockTimestampFromLatestUpdate() public view returns (uint256 blockTimestamp) {\\n    (, blockTimestamp) = getTimestampsFromLatestUpdate();\\n  }\\n\\n  /**\\n   * @dev Returns 2 timestamps packed into a single uint256 number\\n   * @return packedTimestamps a single uin256 number with 2 timestamps\\n   */\\n  function getPackedTimestampsFromLatestUpdate() public view returns (uint256 packedTimestamps) {\\n    assembly {\\n      packedTimestamps := sload(LATEST_UPDATE_TIMESTAMPS_STORAGE_LOCATION)\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns timestamps of the latest successful update\\n   * @return dataTimestamp timestamp (usually in milliseconds) from the signed data packages\\n   * @return blockTimestamp timestamp of the block when the update has happened\\n   */\\n  function getTimestampsFromLatestUpdate() public view virtual returns (uint128 dataTimestamp, uint128 blockTimestamp) {\\n    return _unpackTimestamps(getPackedTimestampsFromLatestUpdate());\\n  }\\n\\n\\n  /**\\n   * @dev A helpful function to unpack 2 timestamps from one uin256 number\\n   * @param packedTimestamps a single uin256 number\\n   * @return dataTimestamp fetched from left 128 bits\\n   * @return blockTimestamp fetched from right 128 bits\\n   */\\n  function _unpackTimestamps(uint256 packedTimestamps) internal pure returns (uint128 dataTimestamp, uint128 blockTimestamp) {\\n    dataTimestamp = uint128(packedTimestamps >> 128); // left 128 bits\\n    blockTimestamp = uint128(packedTimestamps); // right 128 bits\\n  }\\n\\n\\n  /**\\n   * @dev Logic of saving timestamps of the current update\\n   * By default, it stores packed timestamps in one storage slot (32 bytes)\\n   * to minimise gas costs\\n   * But it can be overriden (e.g. in SinglePriceFeedAdapter)\\n   * @param   dataPackagesTimestamp  .\\n   */\\n  function _saveTimestampsOfCurrentUpdate(uint256 dataPackagesTimestamp) internal virtual {\\n    uint256 blockTimestamp = getBlockTimestamp();\\n\\n    if (blockTimestamp > MAX_NUMBER_FOR_128_BITS) {\\n      revert BlockTimestampIsTooBig(blockTimestamp);\\n    }\\n\\n    if (dataPackagesTimestamp > MAX_NUMBER_FOR_128_BITS) {\\n      revert DataTimestampIsTooBig(dataPackagesTimestamp);\\n    }\\n\\n    assembly {\\n      let timestamps := or(shl(BITS_COUNT_IN_16_BYTES, dataPackagesTimestamp), blockTimestamp)\\n      sstore(LATEST_UPDATE_TIMESTAMPS_STORAGE_LOCATION, timestamps)\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns the latest properly reported value of the data feed\\n   * @param dataFeedId The identifier of the requested data feed\\n   * @return value The latest value of the given data feed\\n   */\\n  function getValueForDataFeed(bytes32 dataFeedId) public view returns (uint256) {\\n    getDataFeedIndex(dataFeedId); // will revert if data feed id is not supported\\n\\n    // \\\"unsafe\\\" here means \\\"without validation\\\"\\n    uint256 valueForDataFeed = getValueForDataFeedUnsafe(dataFeedId);\\n\\n    validateDataFeedValueOnRead(dataFeedId, valueForDataFeed);\\n    return valueForDataFeed;\\n  }\\n\\n  /**\\n   * @notice Returns the latest properly reported values for several data feeds\\n   * @param dataFeedIds The array of identifiers for the requested feeds\\n   * @return values Values of the requested data feeds in the corresponding order\\n   */\\n  function getValuesForDataFeeds(bytes32[] memory dataFeedIds) public view returns (uint256[] memory) {\\n    uint256[] memory values = getValuesForDataFeedsUnsafe(dataFeedIds);\\n    for (uint256 i = 0; i < dataFeedIds.length;) {\\n      bytes32 dataFeedId = dataFeedIds[i];\\n      getDataFeedIndex(dataFeedId); // will revert if data feed id is not supported\\n      validateDataFeedValueOnRead(dataFeedId, values[i]);\\n      unchecked { i++; } // reduces gas costs\\n    }\\n    return values;\\n  }\\n\\n\\n\\n  /**\\n   * @dev Reverts if proposed value for the proposed data feed id is invalid\\n   * Is called on every NOT *unsafe method which reads dataFeed\\n   * By default, it just checks if the value is not equal to 0, but it can be extended\\n   * @param dataFeedId The data feed identifier\\n   * @param valueForDataFeed Proposed value for the data feed\\n   */\\n  function validateDataFeedValueOnRead(bytes32 dataFeedId, uint256 valueForDataFeed) public view virtual {\\n    if (valueForDataFeed == 0) {\\n      revert DataFeedValueCannotBeZero(dataFeedId);\\n    }\\n  }\\n\\n  /**\\n   * @dev Reverts if proposed value for the proposed data feed id is invalid\\n   * Is called on every NOT *unsafe method which writes dataFeed\\n   * By default, it does nothing\\n   * @param dataFeedId The data feed identifier\\n   * @param valueForDataFeed Proposed value for the data feed\\n   */\\n  function validateDataFeedValueOnWrite(bytes32 dataFeedId, uint256 valueForDataFeed) public view virtual {\\n    if (valueForDataFeed == 0) {\\n      revert DataFeedValueCannotBeZero(dataFeedId);\\n    }\\n  }\\n\\n  /**\\n   * @dev [HIGH RISK] Returns the latest value for a given data feed without validation\\n   * Important! Using this function instead of `getValueForDataFeed` may cause\\n   * significant risk for your smart contracts\\n   * @param dataFeedId The data feed identifier\\n   * @return dataFeedValue Unvalidated value of the latest successful update\\n   */\\n  function getValueForDataFeedUnsafe(bytes32 dataFeedId) public view virtual returns (uint256);\\n\\n  /**\\n   * @notice [HIGH RISK] Returns the latest properly reported values for several data feeds without validation\\n   * Important! Using this function instead of `getValuesForDataFeeds` may cause\\n   * significant risk for your smart contracts\\n   * @param requestedDataFeedIds The array of identifiers for the requested feeds\\n   * @return values Unvalidated values of the requested data feeds in the corresponding order\\n   */\\n  function getValuesForDataFeedsUnsafe(bytes32[] memory requestedDataFeedIds) public view virtual returns (uint256[] memory values) {\\n    values = new uint256[](requestedDataFeedIds.length);\\n    for (uint256 i = 0; i < requestedDataFeedIds.length;) {\\n      values[i] = getValueForDataFeedUnsafe(requestedDataFeedIds[i]);\\n      unchecked { i++; } // reduces gas costs\\n    }\\n    return values;\\n  }\\n}\\n\",\"keccak256\":\"0xac066329df8bd9b77926a6633cf70fe2497f175c673de14e11d4c9b5cf38aeae\",\"license\":\"BUSL-1.1\"},\"contracts/RedStoneBaseContracts/redstone-oracles-monorepo/packages/on-chain-relayer/contracts/price-feeds/MergedPriceFeedAdapterCommon.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.14;\\nimport {IRedstoneAdapter} from \\\"../core/IRedstoneAdapter.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nabstract contract MergedPriceFeedAdapterCommon {\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n  error CannotUpdateMoreThanOneDataFeed();\\n\\n  function getPriceFeedAdapter() public view virtual returns (IRedstoneAdapter) {\\n    return IRedstoneAdapter(address(this));\\n  }\\n\\n  function aggregator() public view virtual returns (address) {\\n    return address(getPriceFeedAdapter());\\n  }\\n}\\n\",\"keccak256\":\"0xc6ebcd554e860a00f4dea560ec2c03d09c402e697b3287a099e86bb4f61aee68\",\"license\":\"BUSL-1.1\"},\"contracts/RedStoneBaseContracts/redstone-oracles-monorepo/packages/on-chain-relayer/contracts/price-feeds/PriceFeedBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.14;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {IRedstoneAdapter} from \\\"../core/IRedstoneAdapter.sol\\\";\\nimport {IPriceFeed} from \\\"./interfaces/IPriceFeed.sol\\\";\\n\\n/**\\n * @title Main logic of the price feed contract\\n * @author The Redstone Oracles team\\n * @dev Implementation of common functions for the PriceFeed contract\\n * that queries data from the specified PriceFeedAdapter\\n * \\n * It can be used by projects that have already implemented with Chainlink-like\\n * price feeds and would like to minimise changes in their existing codebase.\\n * \\n * If you are flexible, it's much better (and cheaper in terms of gas) to query\\n * the PriceFeedAdapter contract directly\\n */\\nabstract contract PriceFeedBase is IPriceFeed, Initializable {\\n  uint256 internal constant INT256_MAX = uint256(type(int256).max);\\n\\n  error UnsafeUintToIntConversion(uint256 value);\\n\\n  /**\\n   * @dev Helpful function for upgradable contracts\\n   */\\n  function initialize() public virtual initializer {\\n    // We don't have storage variables, but we keep this function\\n    // Because it is used for contract setup in upgradable contracts\\n  }\\n\\n  /**\\n   * @notice Returns data feed identifier for the PriceFeed contract\\n   * @return dataFeedId The identifier of the data feed\\n   */\\n  function getDataFeedId() public view virtual returns (bytes32);\\n\\n  /**\\n   * @notice Returns the address of the price feed adapter\\n   * @return address The address of the price feed adapter\\n   */\\n  function getPriceFeedAdapter() public view virtual returns (IRedstoneAdapter);\\n\\n\\n  /**\\n   * @notice Returns the number of decimals for the price feed\\n   * @dev By default, RedStone uses 8 decimals for data feeds\\n   * @return decimals The number of decimals in the price feed values\\n   */\\n  function decimals() public virtual pure override returns (uint8) {\\n    return 8;\\n  }\\n\\n\\n  /**\\n   * @notice Description of the Price Feed\\n   * @return description\\n   */\\n  function description() public view virtual override returns (string memory) {\\n    return \\\"Redstone Price Feed\\\";\\n  }\\n\\n  /**\\n   * @notice Version of the Price Feed\\n   * @dev Currently it has no specific motivation and was added\\n   * only to be compatible with the Chainlink interface\\n   * @return version\\n   */\\n  function version() public virtual pure override returns (uint256) {\\n    return 1;\\n  }\\n\\n\\n  /**\\n   * @notice Returns details of the latest successful update round\\n   * @dev It uses few helpful functions to abstract logic of getting\\n   * latest round id and value\\n   * @return roundId The number of the latest round\\n   * @return answer The latest reported value\\n   * @return startedAt Block timestamp when the latest successful round started\\n   * @return updatedAt Block timestamp of the latest successful round\\n   * @return answeredInRound The number of the latest round\\n   */\\n  function latestRoundData()\\n    public\\n    view\\n    override\\n    virtual\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    )\\n  {\\n    roundId = latestRound();\\n    answer = latestAnswer();\\n\\n    uint256 blockTimestamp = getPriceFeedAdapter().getBlockTimestampFromLatestUpdate();\\n\\n    // These values are equal after chainlink\\u2019s OCR update\\n    startedAt = blockTimestamp;\\n    updatedAt = blockTimestamp;\\n\\n    // We want to be compatible with Chainlink's interface\\n    // And in our case the roundId is always equal to answeredInRound\\n    answeredInRound = roundId;\\n  }\\n\\n  /**\\n   * @notice Old Chainlink function for getting the latest successfully reported value\\n   * @return latestAnswer The latest successfully reported value\\n   */\\n  function latestAnswer() public virtual view returns (int256) {\\n    bytes32 dataFeedId = getDataFeedId();\\n\\n    uint256 uintAnswer = getPriceFeedAdapter().getValueForDataFeed(dataFeedId);\\n\\n    if (uintAnswer > INT256_MAX) {\\n      revert UnsafeUintToIntConversion(uintAnswer);\\n    }\\n\\n    return int256(uintAnswer);\\n  }\\n\\n  /**\\n   * @notice Old Chainlink function for getting the number of latest round\\n   * @return latestRound The number of the latest update round\\n   */\\n  function latestRound() public view virtual returns (uint80);\\n}\\n\",\"keccak256\":\"0x2dbe79083e949d1489b492bbf67d75aaec2f815180101cd7f183d3761cb33f81\",\"license\":\"BUSL-1.1\"},\"contracts/RedStoneBaseContracts/redstone-oracles-monorepo/packages/on-chain-relayer/contracts/price-feeds/PriceFeedsAdapterBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.14;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {RedstoneAdapterBase} from \\\"../core/RedstoneAdapterBase.sol\\\";\\n\\n/**\\n * @title Common logic of the price feeds adapter contracts\\n * @author The Redstone Oracles team\\n */\\nabstract contract PriceFeedsAdapterBase is RedstoneAdapterBase, Initializable {\\n\\n  /**\\n   * @dev Helpful function for upgradable contracts\\n   */\\n  function initialize() public virtual initializer {\\n    // We don't have storage variables, but we keep this function\\n    // Because it is used for contract setup in upgradable contracts\\n  }\\n\\n  /**\\n   * @dev This function is virtual and may contain additional logic in the derived contract\\n   * E.g. it can check if the updating conditions are met (e.g. if at least one\\n   * value is deviated enough)\\n   * @param dataFeedIdsArray Array of all data feeds identifiers\\n   * @param values The reported values that are validated and reported\\n   */\\n  function _validateAndUpdateDataFeedsValues(\\n    bytes32[] memory dataFeedIdsArray,\\n    uint256[] memory values\\n  ) internal virtual override {\\n    for (uint256 i = 0; i < dataFeedIdsArray.length;) {\\n      _validateAndUpdateDataFeedValue(dataFeedIdsArray[i], values[i]);\\n      unchecked { i++; } // reduces gas costs\\n    }\\n  }\\n\\n  /**\\n   * @dev Helpful virtual function for handling value validation and saving in derived\\n   * Price Feed Adapters contracts \\n   * @param dataFeedId The data feed identifier\\n   * @param dataFeedValue Proposed value for the data feed\\n   */\\n  function _validateAndUpdateDataFeedValue(bytes32 dataFeedId, uint256 dataFeedValue) internal virtual;\\n}\\n\",\"keccak256\":\"0xe281abcb1a3332b6cc7b88a133a6e96d4ad0ca1d041af537e5a020eab8efb27b\",\"license\":\"BUSL-1.1\"},\"contracts/RedStoneBaseContracts/redstone-oracles-monorepo/packages/on-chain-relayer/contracts/price-feeds/interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.14;\\n\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport {IPriceFeedLegacy} from \\\"./IPriceFeedLegacy.sol\\\";\\n\\n/**\\n * @title Complete price feed interface\\n * @author The Redstone Oracles team\\n * @dev All required public functions that must be implemented\\n * by each Redstone PriceFeed contract\\n */\\ninterface IPriceFeed is IPriceFeedLegacy, AggregatorV3Interface {\\n  /**\\n   * @notice Returns data feed identifier for the PriceFeed contract\\n   * @return dataFeedId The identifier of the data feed\\n   */\\n  function getDataFeedId() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x72a006f84f1e66417fb9804eab4a7ac83dec87f7d0ec72128a3142e9ae7cb3b9\",\"license\":\"BUSL-1.1\"},\"contracts/RedStoneBaseContracts/redstone-oracles-monorepo/packages/on-chain-relayer/contracts/price-feeds/interfaces/IPriceFeedLegacy.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.14;\\n\\n/**\\n * @title Interface with the old Chainlink Price Feed functions\\n * @author The Redstone Oracles team\\n * @dev There are some projects (e.g. gmx-contracts) that still\\n * rely on some legacy functions\\n */\\ninterface IPriceFeedLegacy {\\n  /**\\n   * @notice Old Chainlink function for getting the number of latest round\\n   * @return latestRound The number of the latest update round\\n   */\\n  function latestRound() external view returns (uint80);\\n\\n  \\n  /**\\n   * @notice Old Chainlink function for getting the latest successfully reported value\\n   * @return latestAnswer The latest successfully reported value\\n   */\\n  function latestAnswer() external view returns (int256);\\n}\\n\",\"keccak256\":\"0x9b32492517fb092a7c597ffe5ededb8ba7a1cafb7fbb1fd5bd10cd6762a908ff\",\"license\":\"BUSL-1.1\"},\"contracts/RedStoneBaseContracts/redstone-oracles-monorepo/packages/on-chain-relayer/contracts/price-feeds/with-rounds/MergedPriceFeedAdapterWithRounds.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.14;\\n\\nimport {PriceFeedBase, PriceFeedWithRounds} from \\\"./PriceFeedWithRounds.sol\\\";\\nimport {PriceFeedsAdapterBase, PriceFeedsAdapterWithRounds} from \\\"./PriceFeedsAdapterWithRounds.sol\\\";\\nimport {IRedstoneAdapter} from \\\"../../core/IRedstoneAdapter.sol\\\";\\nimport {MergedPriceFeedAdapterCommon} from \\\"../MergedPriceFeedAdapterCommon.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nabstract contract MergedPriceFeedAdapterWithRounds is\\n  MergedPriceFeedAdapterCommon,\\n  PriceFeedWithRounds,\\n  PriceFeedsAdapterWithRounds\\n{\\n  function initialize() public virtual override(PriceFeedBase, PriceFeedsAdapterBase) initializer {\\n    // We don't have storage variables, but we keep this function\\n    // Because it is used for contract setup in upgradable contracts\\n  }\\n\\n  function getPriceFeedAdapter() public view virtual override(MergedPriceFeedAdapterCommon, PriceFeedBase) returns (IRedstoneAdapter) {\\n    return super.getPriceFeedAdapter();\\n  }\\n\\n  function getDataFeedIds() public view virtual override returns (bytes32[] memory dataFeedIds) {\\n    dataFeedIds = new bytes32[](1);\\n    dataFeedIds[0] = getDataFeedId();\\n  }\\n\\n  function getDataFeedIndex(bytes32 dataFeedId) public view virtual override returns (uint256) {\\n    if (dataFeedId == getDataFeedId()) {\\n      return 0;\\n    } else {\\n      revert DataFeedIdNotFound(dataFeedId);\\n    }\\n  }\\n\\n  function _emitEventAfterSingleValueUpdate(uint256 newValue) internal virtual {\\n    emit AnswerUpdated(SafeCast.toInt256(newValue), getLatestRoundId(), block.timestamp);\\n  }\\n\\n  function _validateAndUpdateDataFeedsValues(\\n    bytes32[] memory dataFeedIdsArray,\\n    uint256[] memory values\\n  ) internal virtual override {\\n    if (dataFeedIdsArray.length != 1 || values.length != 1) {\\n      revert CannotUpdateMoreThanOneDataFeed();\\n    }\\n    PriceFeedsAdapterWithRounds._validateAndUpdateDataFeedsValues(dataFeedIdsArray, values);\\n    _emitEventAfterSingleValueUpdate(values[0]);\\n  }\\n}\\n\",\"keccak256\":\"0x4d6963fee0dbca5999e331b86aef11e9bd563c5ebe1f1288dc87ec2e83ff06b0\",\"license\":\"BUSL-1.1\"},\"contracts/RedStoneBaseContracts/redstone-oracles-monorepo/packages/on-chain-relayer/contracts/price-feeds/with-rounds/PriceFeedWithRounds.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.14;\\n\\nimport {PriceFeedsAdapterWithRounds} from \\\"./PriceFeedsAdapterWithRounds.sol\\\";\\nimport {PriceFeedBase} from \\\"../PriceFeedBase.sol\\\";\\n\\n/**\\n * @title Implementation of a price feed contract with rounds support\\n * @author The Redstone Oracles team\\n * @dev This contract is abstract. The actual contract instance\\n * must implement the following functions:\\n * - getDataFeedId\\n * - getPriceFeedAdapter\\n */\\nabstract contract PriceFeedWithRounds is PriceFeedBase {\\n  uint256 internal constant UINT80_MAX = uint256(type(uint80).max);\\n\\n  error UnsafeUint256ToUint80Conversion(uint256 value);\\n\\n  function getPriceFeedAdapterWithRounds() public view returns(PriceFeedsAdapterWithRounds) {\\n    return PriceFeedsAdapterWithRounds(address(getPriceFeedAdapter()));\\n  }\\n\\n  /**\\n   * @notice Old Chainlink function for getting the number of latest round\\n   * @return latestRound The number of the latest successful round\\n   */\\n  function latestRound() public view override returns (uint80) {\\n    uint256 latestRoundUint256 = getPriceFeedAdapterWithRounds().getLatestRoundId();\\n\\n    if (latestRoundUint256 > UINT80_MAX) {\\n      revert UnsafeUint256ToUint80Conversion(latestRoundUint256);\\n    }\\n\\n    return uint80(latestRoundUint256);\\n  }\\n\\n  /**\\n   * @notice Returns details for the given round\\n   * @param roundId Requested round identifier\\n   */\\n  function getRoundData(uint80 requestedRoundId) public view override returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound) {\\n    (uint256 dataFeedValue, uint128 roundDataTimestamp, uint128 roundBlockTimestamp) = getPriceFeedAdapterWithRounds().getRoundDataFromAdapter(\\n      getDataFeedId(),\\n      requestedRoundId\\n    );\\n    roundId = requestedRoundId;\\n\\n    if (dataFeedValue > INT256_MAX) {\\n      revert UnsafeUintToIntConversion(dataFeedValue);\\n    }\\n\\n    answer = int256(dataFeedValue);\\n    startedAt = roundDataTimestamp / 1000; // convert to seconds\\n    updatedAt = roundBlockTimestamp;\\n\\n    // We want to be compatible with Chainlink's interface\\n    // And in our case the roundId is always equal to answeredInRound\\n    answeredInRound = requestedRoundId;\\n  }\\n}\\n\",\"keccak256\":\"0x1772c766cfce0f4d7849cdd0ab7fd987fe7c974384cb3df55727bdf42844b4f3\",\"license\":\"BUSL-1.1\"},\"contracts/RedStoneBaseContracts/redstone-oracles-monorepo/packages/on-chain-relayer/contracts/price-feeds/with-rounds/PriceFeedsAdapterWithRounds.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.14;\\n\\nimport {PriceFeedsAdapterBase} from \\\"../PriceFeedsAdapterBase.sol\\\";\\n\\n/**\\n * @title Price feeds adapter contract with rounds support\\n * @author The Redstone Oracles team\\n * @dev This contract is abstract. The actual contract instance\\n * must implement the following functions:\\n * - getDataFeedIds\\n * - getUniqueSignersThreshold\\n * - getAuthorisedSignerIndex\\n *\\n * We also recommend to override `getDataFeedIndex` function with hardcoded\\n * values, as it can significantly reduce gas usage\\n */\\nabstract contract PriceFeedsAdapterWithRounds is PriceFeedsAdapterBase {\\n  bytes32 constant VALUES_MAPPING_STORAGE_LOCATION = 0x4dd0c77efa6f6d590c97573d8c70b714546e7311202ff7c11c484cc841d91bfc; // keccak256(\\\"RedStone.oracleValuesMapping\\\");\\n  bytes32 constant ROUND_TIMESTAMPS_MAPPING_STORAGE_LOCATION = 0x207e00944d909d1224f0c253d58489121d736649f8393199f55eecf4f0cf3eb0; // keccak256(\\\"RedStone.roundTimestampMapping\\\");\\n  bytes32 constant LATEST_ROUND_ID_STORAGE_LOCATION = 0xc68d7f1ee07d8668991a8951e720010c9d44c2f11c06b5cac61fbc4083263938; // keccak256(\\\"RedStone.latestRoundId\\\");\\n\\n  error RoundNotFound(uint256 roundId);\\n\\n  /**\\n   * @dev Saved new round data to the storage\\n   * @param dataFeedIdsArray Array of all data feeds identifiers\\n   * @param values The reported values that are validated and reported\\n   */\\n  function _validateAndUpdateDataFeedsValues(\\n    bytes32[] memory dataFeedIdsArray,\\n    uint256[] memory values\\n  ) internal virtual override {\\n    _incrementLatestRoundId();\\n    _updatePackedTimestampsForLatestRound();\\n\\n    for (uint256 i = 0; i < dataFeedIdsArray.length;) {\\n      _validateAndUpdateDataFeedValue(dataFeedIdsArray[i], values[i]);\\n      unchecked { i++; } // reduces gas costs\\n    }\\n  }\\n\\n  /**\\n   * @dev Helpful virtual function for handling value validation and updating\\n   * @param dataFeedId The data feed identifier\\n   * @param dataFeedValue Proposed value for the data feed\\n   */\\n  function _validateAndUpdateDataFeedValue(bytes32 dataFeedId, uint256 dataFeedValue) internal virtual override {\\n    validateDataFeedValueOnWrite(dataFeedId, dataFeedValue);\\n    bytes32 locationInStorage = _getValueLocationInStorage(dataFeedId, getLatestRoundId());\\n    assembly {\\n      sstore(locationInStorage, dataFeedValue)\\n    }\\n  }\\n\\n  /**\\n   * @dev [HIGH RISK] Returns the value for a given data feed from the latest round\\n   * without validation. Important! Using this function instead of `getValueForDataFeed`\\n   * may cause significant risk for your smart contracts\\n   * @param dataFeedId The data feed identifier\\n   * @return dataFeedValue Unvalidated value of the latest successful update\\n   */\\n  function getValueForDataFeedUnsafe(bytes32 dataFeedId) public view override returns (uint256 dataFeedValue) {\\n    return getValueForDataFeedAndRound(dataFeedId, getLatestRoundId());\\n  }\\n\\n  /**\\n   * @dev [HIGH RISK] Returns value for the requested data feed from the given round\\n   * without validation.\\n   * @param dataFeedId The data feed identifier\\n   * @param roundId The number of the requested round\\n   * @return dataFeedValue value for the requested data feed from the given round\\n   */\\n  function getValueForDataFeedAndRound(bytes32 dataFeedId, uint256 roundId) public view returns (uint256 dataFeedValue) {\\n    bytes32 locationInStorage = _getValueLocationInStorage(dataFeedId, roundId);\\n    assembly {\\n      dataFeedValue := sload(locationInStorage)\\n    }\\n  }\\n\\n\\n  /**\\n   * @notice Returns data from the latest successful round\\n   * @return latestRoundId\\n   * @return latestRoundDataTimestamp\\n   * @return latestRoundBlockTimestamp\\n   */\\n  function getLatestRoundParams() public view returns ( uint256 latestRoundId, uint128 latestRoundDataTimestamp, uint128 latestRoundBlockTimestamp) {\\n    latestRoundId = getLatestRoundId();\\n    uint256 packedRoundTimestamps = getPackedTimestampsForRound(latestRoundId);\\n    (latestRoundDataTimestamp, latestRoundBlockTimestamp) = _unpackTimestamps(\\n      packedRoundTimestamps\\n    );\\n  }\\n\\n\\n  /**\\n   * @notice Returns details for the given round and data feed\\n   * @param dataFeedId Requested data feed\\n   * @param roundId Requested round identifier\\n   * @return dataFeedValue\\n   * @return roundDataTimestamp\\n   * @return roundBlockTimestamp\\n   */\\n  function getRoundDataFromAdapter(bytes32 dataFeedId, uint256 roundId) public view returns (uint256 dataFeedValue, uint128 roundDataTimestamp, uint128 roundBlockTimestamp) {\\n    if (roundId > getLatestRoundId() || roundId == 0) {\\n      revert RoundNotFound(roundId);\\n    }\\n\\n    dataFeedValue = getValueForDataFeedAndRound(dataFeedId, roundId);\\n    validateDataFeedValueOnRead(dataFeedId, dataFeedValue);\\n    uint256 packedRoundTimestamps = getPackedTimestampsForRound(roundId);\\n    (roundDataTimestamp, roundBlockTimestamp) = _unpackTimestamps(packedRoundTimestamps);\\n  }\\n\\n\\n  /**\\n   * @dev Helpful function for getting storage location for requested value\\n   * @param dataFeedId Requested data feed identifier\\n   * @param roundId Requested round number\\n   * @return locationInStorage\\n   */\\n  function _getValueLocationInStorage(bytes32 dataFeedId, uint256 roundId) private pure returns (bytes32) {\\n    return keccak256(abi.encode(dataFeedId, roundId, VALUES_MAPPING_STORAGE_LOCATION));\\n  }\\n\\n\\n  /**\\n   * @dev Helpful function for getting storage location for round timestamps\\n   * @param roundId Requested round number\\n   * @return locationInStorage\\n   */\\n  function _getRoundTimestampsLocationInStorage(uint256 roundId) private pure returns (bytes32) {\\n    return keccak256(abi.encode(roundId, ROUND_TIMESTAMPS_MAPPING_STORAGE_LOCATION));\\n  }\\n\\n\\n  /**\\n   * @notice Returns latest successful round number\\n   * @return latestRoundId\\n   */\\n  function getLatestRoundId() public view returns (uint256 latestRoundId) {\\n    assembly {\\n      latestRoundId := sload(LATEST_ROUND_ID_STORAGE_LOCATION)\\n    }\\n  }\\n\\n  /**\\n   * @dev Helpful function for incrementing the latest round number by 1 in\\n   * the contract storage\\n   */\\n  function _incrementLatestRoundId() private {\\n    uint256 latestRoundId = getLatestRoundId();\\n    assembly {\\n      sstore(LATEST_ROUND_ID_STORAGE_LOCATION, add(latestRoundId, 1))\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns timestamps related to the given round packed into one number\\n   * @param roundId Requested round number\\n   * @return roundTimestamps\\n   */\\n  function getPackedTimestampsForRound(uint256 roundId) public view returns (uint256 roundTimestamps) {\\n    bytes32 locationInStorage = _getRoundTimestampsLocationInStorage(roundId);\\n    assembly {\\n      roundTimestamps := sload(locationInStorage)\\n    }\\n  }\\n\\n\\n  /**\\n   * @dev Saves packed timestamps (data and block.timestamp) in the contract storage\\n   */\\n  function _updatePackedTimestampsForLatestRound() private {\\n    uint256 packedTimestamps = getPackedTimestampsFromLatestUpdate();\\n    uint256 latestRoundId = getLatestRoundId();\\n    bytes32 locationInStorage = _getRoundTimestampsLocationInStorage(latestRoundId);\\n    assembly {\\n      sstore(locationInStorage, packedTimestamps)\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xd0047309a0b84fccb50224399a5a4c16f4417bbfd526a856a5b46d0826d650f1\",\"license\":\"BUSL-1.1\"},\"contracts/adapters/RedstonePriceFeedWithRoundsUSDT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nimport  \\\"../RedStoneBaseContracts/redstone-oracles-monorepo/packages/on-chain-relayer/contracts/price-feeds/with-rounds/MergedPriceFeedAdapterWithRounds.sol\\\";\\n\\ncontract RedstonePriceFeedWithRoundsUSDT is MergedPriceFeedAdapterWithRounds {\\n\\n    bytes32 constant private USDT_ID = bytes32(\\\"USDT\\\");\\n\\n    error UpdaterNotAuthorised(address signer);\\n\\n\\n    function getDataFeedId() public pure  override returns (bytes32) {\\n        return USDT_ID;\\n    }\\n\\n\\n    function getDataServiceId() public pure override returns (string memory) {\\n        return \\\"redstone-primary-prod\\\";\\n    }\\n\\n    function getUniqueSignersThreshold() public pure override returns (uint8) {\\n        return 3;\\n    }\\n\\n    function getAuthorisedSignerIndex(\\n        address signerAddress\\n    ) public view virtual override returns (uint8) {\\n        if (signerAddress == 0x8BB8F32Df04c8b654987DAaeD53D6B6091e3B774) {\\n            return 0;\\n        } else if (signerAddress == 0xdEB22f54738d54976C4c0fe5ce6d408E40d88499) {\\n            return 1;\\n        } else if (signerAddress == 0x51Ce04Be4b3E32572C4Ec9135221d0691Ba7d202) {\\n            return 2;\\n        } else if (signerAddress == 0xDD682daEC5A90dD295d14DA4b0bec9281017b5bE) {\\n            return 3;\\n        } else if (signerAddress == 0x9c5AE89C4Af6aA32cE58588DBaF90d18a855B6de) {\\n            return 4;\\n        } else {\\n            revert SignerNotAuthorised(signerAddress);\\n        }\\n    }\\n\\n\\n\\n}\\n\",\"keccak256\":\"0x8f3a29f3f2833b58c352e80ad627a3e7d19bf17e77f7960e4304c98db4b9915a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061287b806100206000396000f3fe608060405234801561001057600080fd5b50600436106102de5760003560e01c80638ec7c82111610186578063c274583a116100e3578063f34f73d811610097578063fba0315811610071578063fba03158146106bc578063fd1f4bef146106c4578063feaf968c146106eb57600080fd5b8063f34f73d81461063c578063f50b2efe146106a2578063f90c4924146106b557600080fd5b8063cbc33eb2116100c8578063cbc33eb214610427578063d13758171461062d578063d149c0d71461063557600080fd5b8063c274583a146105ce578063c83377601461060757600080fd5b8063aef2f1651161013a578063b24ebfcc1161011f578063b24ebfcc14610595578063bb1f29b7146105a8578063c14c9204146105bb57600080fd5b8063aef2f1651461054f578063b0f106b01461056457600080fd5b80639a6fc8f51161016b5780639a6fc8f5146104e1578063a8b940e61461052b578063ada114571461053c57600080fd5b80638ec7c821146104bb578063971b9c03146104ce57600080fd5b806355a547d51161023f5780636e3e0370116101f35780637a02bdf1116101cd5780637a02bdf1146104845780638129fc1c1461048c5780638c3b990b1461049457600080fd5b80636e3e0370146104275780637284e4161461043c578063796b89b91461047e57600080fd5b80636668316a116102245780636668316a146103de578063668a0f02146103f15780636dafaf6a1461041457600080fd5b806355a547d5146103b657806355d12458146103be57600080fd5b806344e02982116102965780634b6a9d811161027b5780634b6a9d81146102fe57806350d25bcd146103a757806354fd4d50146103af57600080fd5b806344e029821461038e57806347043b00146103a157600080fd5b806326bf15ff116102c757806326bf15ff14610325578063313ce567146103665780633ce142f51461037b57600080fd5b80631b2758ee146102e3578063245a7bfc146102fe575b600080fd5b6102eb6106f3565b6040519081526020015b60405180910390f35b305b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016102f5565b6103386103333660046123f1565b610715565b604080519384526fffffffffffffffffffffffffffffffff92831660208501529116908201526060016102f5565b60085b60405160ff90911681526020016102f5565b610369610389366004612413565b610808565b6102eb61039c366004612449565b610976565b30610300565b6102eb61099f565b60016102eb565b6102eb610a9d565b6103d16103cc366004612504565b610bf9565b6040516102f5919061259a565b6102eb6103ec366004612449565b610c9a565b6103f9610cc8565b60405169ffffffffffffffffffff90911681526020016102f5565b6102eb610422366004612449565b610d83565b61043a6104353660046123f1565b610de9565b005b60408051808201909152601381527f52656473746f6e6520507269636520466565640000000000000000000000000060208201525b6040516102f591906125de565b426102eb565b6102eb610e2a565b61043a610e4c565b7fc68d7f1ee07d8668991a8951e720010c9d44c2f11c06b5cac61fbc4083263938546102eb565b6102eb6104c9366004612449565b610fd5565b6103d16104dc366004612504565b610fe9565b6104f46104ef36600461264b565b61105f565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a0016102f5565b61043a610539366004612413565b50565b61043a61054a366004612449565b6111de565b60408051603c815260b46020820152016102f5565b61056c6111f0565b604080516fffffffffffffffffffffffffffffffff9384168152929091166020830152016102f5565b6102eb6105a3366004612504565b61122e565b61043a6105b6366004612449565b611239565b61043a6105c9366004612449565b6112fc565b60408051808201909152601581527f72656473746f6e652d7072696d6172792d70726f6400000000000000000000006020820152610471565b7f55534454000000000000000000000000000000000000000000000000000000006102eb565b61033861133e565b60036102eb565b6102eb61064a3660046123f1565b60408051602080820194909452808201929092527f4dd0c77efa6f6d590c97573d8c70b714546e7311202ff7c11c484cc841d91bfc606080840191909152815180840390910181526080909201905280519101205490565b61043a6106b0366004612449565b611387565b6003610369565b6103d16113de565b7f3d01e4d77237ea0f771f1786da4d4ff757fcba6a92933aa53b1dcef2d6bd6fe2546102eb565b6104f4611443565b60006106fd6111f0565b6fffffffffffffffffffffffffffffffff1692915050565b60008060006107427fc68d7f1ee07d8668991a8951e720010c9d44c2f11c06b5cac61fbc40832639385490565b84118061074d575083155b1561078c576040517ff8ae8137000000000000000000000000000000000000000000000000000000008152600481018590526024015b60405180910390fd5b6040805160208082018890528183018790527f4dd0c77efa6f6d590c97573d8c70b714546e7311202ff7c11c484cc841d91bfc60608084019190915283518084039091018152608090920190925280519101205492506107ec8584610de9565b60006107f785610fd5565b9396608085901c9650939450505050565b600073ffffffffffffffffffffffffffffffffffffffff8216738bb8f32df04c8b654987daaed53d6b6091e3b7740361084357506000919050565b73ffffffffffffffffffffffffffffffffffffffff821673deb22f54738d54976c4c0fe5ce6d408e40d884990361087c57506001919050565b73ffffffffffffffffffffffffffffffffffffffff82167351ce04be4b3e32572c4ec9135221d0691ba7d202036108b557506002919050565b73ffffffffffffffffffffffffffffffffffffffff821673dd682daec5a90dd295d14da4b0bec9281017b5be036108ee57506003919050565b73ffffffffffffffffffffffffffffffffffffffff8216739c5ae89c4af6aa32ce58588dbaf90d18a855b6de0361092757506004919050565b6040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83166004820152602401610783565b919050565b600061098182610d83565b50600061098d83610c9a565b90506109998382610de9565b92915050565b6040517f44e029820000000000000000000000000000000000000000000000000000000081527f555344540000000000000000000000000000000000000000000000000000000060048201819052600091829030906344e0298290602401602060405180830381865afa158015610a1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3e9190612677565b90507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811115610999576040517feccac09b00000000000000000000000000000000000000000000000000000000815260048101829052602401610783565b600080610aa86114e0565b90506000610ab582611615565b61ffff16905080600003610af5576040517f8552ff3c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610b006002836126bf565b915060005b81811015610bf3576000610b1884611668565b9050600080610b286068876126bf565b90506000610b3682366126d2565b9050803592508265ffffffffffff16600003610b7e576040517f336dc9d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b87600003610b96578265ffffffffffff169750610bd7565b878365ffffffffffff1614610bd7576040517fd9d1f46500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610be184886126bf565b96505060019093019250610b05915050565b50505090565b6060815167ffffffffffffffff811115610c1557610c15612462565b604051908082528060200260200182016040528015610c3e578160200160208202803683370190505b50905060005b8251811015610c9457610c6f838281518110610c6257610c626126e5565b6020026020010151610c9a565b828281518110610c8157610c816126e5565b6020908102919091010152600101610c44565b50919050565b60006109998261064a7fc68d7f1ee07d8668991a8951e720010c9d44c2f11c06b5cac61fbc40832639385490565b6000803073ffffffffffffffffffffffffffffffffffffffff16638c3b990b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3a9190612677565b905069ffffffffffffffffffff811115610971576040517f1e93e47c00000000000000000000000000000000000000000000000000000000815260048101829052602401610783565b60007f55534454000000000000000000000000000000000000000000000000000000008203610db457506000919050565b6040517f9382940300000000000000000000000000000000000000000000000000000000815260048101839052602401610783565b80600003610e26576040517f0565ce2a00000000000000000000000000000000000000000000000000000000815260048101839052602401610783565b5050565b6000610e346111f0565b506fffffffffffffffffffffffffffffffff16919050565b600054610100900460ff1615808015610e6c5750600054600160ff909116105b80610e865750303b158015610e86575060005460ff166001145b610f12576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610783565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610f7057600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b801561053957600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b600080610fe1836116a4565b549392505050565b60606000610ff683610bf9565b905060005b8351811015611058576000848281518110611018576110186126e5565b6020026020010151905061102b81610d83565b5061104f81848481518110611042576110426126e5565b6020026020010151610de9565b50600101610ffb565b5092915050565b6000808080808080803073ffffffffffffffffffffffffffffffffffffffff166326bf15ff7f55534454000000000000000000000000000000000000000000000000000000006040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b168152600481019190915269ffffffffffffffffffff8c166024820152604401606060405180830381865afa15801561110b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112f9190612734565b9250925092508897507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115611195576040517feccac09b00000000000000000000000000000000000000000000000000000000815260048101849052602401610783565b8296506103e8826111a6919061279f565b6fffffffffffffffffffffffffffffffff169550806fffffffffffffffffffffffffffffffff16945088935050505091939590929450565b6111e781611700565b61053981611239565b60008061122661121e7f3d01e4d77237ea0f771f1786da4d4ff757fcba6a92933aa53b1dcef2d6bd6fe25490565b608081901c91565b915091509091565b60006109998261174f565b60006112476103e8836127ce565b9050603c60b442838110156112a8578261126182866126d2565b11156112a3576040517fb6b0916d0000000000000000000000000000000000000000000000000000000081526004810185905260248101829052604401610783565b6112f5565b816112b385836126d2565b11156112f5576040517f0321d0b50000000000000000000000000000000000000000000000000000000081526004810185905260248101829052604401610783565b5050505050565b61130461175a565b61130d816111de565b611316816117bd565b60006113206113de565b9050600061132d82611883565b9050611339828261188e565b505050565b600080600061136b7fc68d7f1ee07d8668991a8951e720010c9d44c2f11c06b5cac61fbc40832639385490565b9250600061137884610fd5565b9394608085901c949350915050565b3361138f5750565b6000611399610e2a565b9050808214610e26576040517f6bc11ec50000000000000000000000000000000000000000000000000000000081526004810182905260248101839052604401610783565b604080516001808252818301909252606091602080830190803683370190505090507f555344540000000000000000000000000000000000000000000000000000000081600081518110611434576114346126e5565b60200260200101818152505090565b6000806000806000611453610cc8565b945061145d61099f565b935060003073ffffffffffffffffffffffffffffffffffffffff16631b2758ee6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d09190612677565b9596949594859450879350915050565b60006602ed57011e00007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe036013581161480611548576040517fe7764c9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003660291115611585576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd7360135600060096115be600362ffffff85166126bf565b6115c891906126bf565b9050366115d66002836126bf565b111561160e576040517fc30a7bd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9392505050565b6000806116236020846126bf565b90503681111561165f576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b36033592915050565b600080600061167684611905565b9092509050604e6116888260206126bf565b61169290846127e2565b61169c91906126bf565b949350505050565b6040516000906116e39083907f207e00944d909d1224f0c253d58489121d736649f8393199f55eecf4f0cf3eb090602001918252602082015260400190565b604051602081830303815290604052805190602001209050919050565b600061170a610e2a565b9050808211610e26576040517fef05deba0000000000000000000000000000000000000000000000000000000081526004810183905260248101829052604401610783565b60006109998261195c565b4260006117656106f3565b9050600361177381836126bf565b831015611339576040517f83b3f5c4000000000000000000000000000000000000000000000000000000008152600481018490526024810183905260448101829052606401610783565b426fffffffffffffffffffffffffffffffff81111561180b576040517f70db678f00000000000000000000000000000000000000000000000000000000815260048101829052602401610783565b6fffffffffffffffffffffffffffffffff821115611858576040517f5cbfa8a100000000000000000000000000000000000000000000000000000000815260048101839052602401610783565b60809190911b177f3d01e4d77237ea0f771f1786da4d4ff757fcba6a92933aa53b1dcef2d6bd6fe255565b606061099982611a40565b815160011415806118a157508051600114155b156118d8576040517fbed42bab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6118e28282611bf0565b610e26816000815181106118f8576118f86126e5565b6020026020010151611c50565b6000808080806119166041876126bf565b9050600061192f6119286020846126bf565b3690611cb1565b803594509050611940816003611cb1565b62ffffff9490941697933563ffffffff16965092945050505050565b60008151600003611999576040517f9e198af900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6119a282611cbd565b6000600283516119b291906127ce565b9050600283516119c291906127f9565b600003611a1e576000611a11846119da6001856126d2565b815181106119ea576119ea6126e5565b6020026020010151858481518110611a0457611a046126e5565b6020026020010151611d0b565b905061169c6002826127ce565b828181518110611a3057611a306126e5565b6020026020010151915050919050565b60606000825167ffffffffffffffff811115611a5e57611a5e612462565b604051908082528060200260200182016040528015611a87578160200160208202803683370190505b5090506000835167ffffffffffffffff811115611aa657611aa6612462565b604051908082528060200260200182016040528015611acf578160200160208202803683370190505b5090506000845167ffffffffffffffff811115611aee57611aee612462565b604051908082528060200260200182016040528015611b2157816020015b6060815260200190600190039081611b0c5790505b50905060005b8551811015611b745760408051600380825260808201909252906020820160608036833701905050828281518110611b6157611b616126e5565b6020908102919091010152600101611b27565b506000611b7f6114e0565b90506000611b8c82611615565b61ffff169050611b9d6002836126bf565b60405190925060005b82811015611bd9576000611bbd8a89898989611d17565b9050611bc981866126bf565b6040849052945050600101611ba6565b50611be48487611fba565b98975050505050505050565b611bf86120e2565b611c00612134565b60005b825181101561133957611c48838281518110611c2157611c216126e5565b6020026020010151838381518110611c3b57611c3b6126e5565b602002602001015161219f565b600101611c03565b7fc68d7f1ee07d8668991a8951e720010c9d44c2f11c06b5cac61fbc408326393854611c7b8261223a565b6040514281527f0559884fd3a460db3073b7fc896cc77986f16e378210ded43186175bf646fc5f9060200160405180910390a350565b600061160e82846126d2565b8051602082016020820281019150805b82811015611d0557815b81811015611cfc578151815180821015611cf2578084528183525b5050602001611cd7565b50602001611ccd565b50505050565b600061160e82846126bf565b600080600080611d2685611905565b909250905060008080606081600d611d49611d426020896126bf565b89906122f0565b611d5391906126bf565b90506000611d6561192860688d6126bf565b90506000611d8283611d7860418f6126bf565b61192891906126bf565b9050611d8e8382611da1565b9350826020850120945081359650611de3565b604080518381526020818501810190925260009101838382377fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0019392505050565b611df48765ffffffffffff16611387565b611e0885611e0360418f6126bf565b6122fc565b9550611e1386610808565b60ff1699505050505050505060008060005b84811015611f8757611e38888583612392565b909350915060005b8c51811015611f7e578c8181518110611e5b57611e5b6126e5565b60200260200101518403611f765760008b8281518110611e7d57611e7d6126e5565b60200260200101519050611e9681896001901b16151590565b158015611ebf5750600360ff168d8381518110611eb557611eb56126e5565b6020026020010151105b15611f70578c8281518110611ed657611ed66126e5565b602002602001018051809190611eeb9061280d565b81525050838b8381518110611f0257611f026126e5565b602002602001015160018f8581518110611f1e57611f1e6126e5565b6020026020010151611f3091906126d2565b81518110611f4057611f406126e5565b60209081029190910101526001881b81178c8381518110611f6357611f636126e5565b6020026020010181815250505b50611f7e565b600101611e40565b50600101611e25565b50505081602082611f9891906126bf565b611fa291906127e2565b611fad90604e6126bf565b9998505050505050505050565b60606000835167ffffffffffffffff811115611fd857611fd8612462565b604051908082528060200260200182016040528015612001578160200160208202803683370190505b509050600360005b85518110156120d85781858281518110612025576120256126e5565b6020026020010151101561208b57848181518110612045576120456126e5565b6020026020010151826040517f2b13aef5000000000000000000000000000000000000000000000000000000008152600401610783929190918252602082015260400190565b60006120af8783815181106120a2576120a26126e5565b602002602001015161122e565b9050808483815181106120c4576120c46126e5565b602090810291909101015250600101612009565b5090949350505050565b600061210c7fc68d7f1ee07d8668991a8951e720010c9d44c2f11c06b5cac61fbc40832639385490565b6001017fc68d7f1ee07d8668991a8951e720010c9d44c2f11c06b5cac61fbc40832639385550565b600061215e7f3d01e4d77237ea0f771f1786da4d4ff757fcba6a92933aa53b1dcef2d6bd6fe25490565b9050600061218a7fc68d7f1ee07d8668991a8951e720010c9d44c2f11c06b5cac61fbc40832639385490565b90506000612197826116a4565b929092555050565b6121a98282610de9565b6000612232836121d77fc68d7f1ee07d8668991a8951e720010c9d44c2f11c06b5cac61fbc40832639385490565b60408051602081018490529081018290527f4dd0c77efa6f6d590c97573d8c70b714546e7311202ff7c11c484cc841d91bfc606082015260009060800160405160208183030381529060405280519060200120905092915050565b919091555050565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8211156122ec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e206160448201527f6e20696e743235360000000000000000000000000000000000000000000000006064820152608401610783565b5090565b600061160e82846127e2565b60408051600080825260208083018085528690523685900380850135831a948401859052803560608501819052910135608084018190529193909260019060a0016020604051602081039080840390855afa15801561235f573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00151979650505050505050565b600080806123a1604e876126bf565b905060006123ce6123c76123b66020896126bf565b6123c18860016126bf565b906122f0565b8390611d0b565b905060006123dc3683611cb1565b80359960209091013598509650505050505050565b6000806040838503121561240457600080fd5b50508035926020909101359150565b60006020828403121561242557600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461160e57600080fd5b60006020828403121561245b57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156124d8576124d8612462565b604052919050565b600067ffffffffffffffff8211156124fa576124fa612462565b5060051b60200190565b6000602080838503121561251757600080fd5b823567ffffffffffffffff81111561252e57600080fd5b8301601f8101851361253f57600080fd5b803561255261254d826124e0565b612491565b81815260059190911b8201830190838101908783111561257157600080fd5b928401925b8284101561258f57833582529284019290840190612576565b979650505050505050565b6020808252825182820181905260009190848201906040850190845b818110156125d2578351835292840192918401916001016125b6565b50909695505050505050565b60006020808352835180602085015260005b8181101561260c578581018301518582016040015282016125f0565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b60006020828403121561265d57600080fd5b813569ffffffffffffffffffff8116811461160e57600080fd5b60006020828403121561268957600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561099957610999612690565b8181038181111561099957610999612690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b80516fffffffffffffffffffffffffffffffff8116811461097157600080fd5b60008060006060848603121561274957600080fd5b8351925061275960208501612714565b915061276760408501612714565b90509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006fffffffffffffffffffffffffffffffff808416806127c2576127c2612770565b92169190910492915050565b6000826127dd576127dd612770565b500490565b808202811582820484141761099957610999612690565b60008261280857612808612770565b500690565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361283e5761283e612690565b506001019056fea2646970667358221220460d0342a850922c4a3b23025a13160f5e376927cc64218542356a3c743de1c864736f6c63430008170033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102de5760003560e01c80638ec7c82111610186578063c274583a116100e3578063f34f73d811610097578063fba0315811610071578063fba03158146106bc578063fd1f4bef146106c4578063feaf968c146106eb57600080fd5b8063f34f73d81461063c578063f50b2efe146106a2578063f90c4924146106b557600080fd5b8063cbc33eb2116100c8578063cbc33eb214610427578063d13758171461062d578063d149c0d71461063557600080fd5b8063c274583a146105ce578063c83377601461060757600080fd5b8063aef2f1651161013a578063b24ebfcc1161011f578063b24ebfcc14610595578063bb1f29b7146105a8578063c14c9204146105bb57600080fd5b8063aef2f1651461054f578063b0f106b01461056457600080fd5b80639a6fc8f51161016b5780639a6fc8f5146104e1578063a8b940e61461052b578063ada114571461053c57600080fd5b80638ec7c821146104bb578063971b9c03146104ce57600080fd5b806355a547d51161023f5780636e3e0370116101f35780637a02bdf1116101cd5780637a02bdf1146104845780638129fc1c1461048c5780638c3b990b1461049457600080fd5b80636e3e0370146104275780637284e4161461043c578063796b89b91461047e57600080fd5b80636668316a116102245780636668316a146103de578063668a0f02146103f15780636dafaf6a1461041457600080fd5b806355a547d5146103b657806355d12458146103be57600080fd5b806344e02982116102965780634b6a9d811161027b5780634b6a9d81146102fe57806350d25bcd146103a757806354fd4d50146103af57600080fd5b806344e029821461038e57806347043b00146103a157600080fd5b806326bf15ff116102c757806326bf15ff14610325578063313ce567146103665780633ce142f51461037b57600080fd5b80631b2758ee146102e3578063245a7bfc146102fe575b600080fd5b6102eb6106f3565b6040519081526020015b60405180910390f35b305b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016102f5565b6103386103333660046123f1565b610715565b604080519384526fffffffffffffffffffffffffffffffff92831660208501529116908201526060016102f5565b60085b60405160ff90911681526020016102f5565b610369610389366004612413565b610808565b6102eb61039c366004612449565b610976565b30610300565b6102eb61099f565b60016102eb565b6102eb610a9d565b6103d16103cc366004612504565b610bf9565b6040516102f5919061259a565b6102eb6103ec366004612449565b610c9a565b6103f9610cc8565b60405169ffffffffffffffffffff90911681526020016102f5565b6102eb610422366004612449565b610d83565b61043a6104353660046123f1565b610de9565b005b60408051808201909152601381527f52656473746f6e6520507269636520466565640000000000000000000000000060208201525b6040516102f591906125de565b426102eb565b6102eb610e2a565b61043a610e4c565b7fc68d7f1ee07d8668991a8951e720010c9d44c2f11c06b5cac61fbc4083263938546102eb565b6102eb6104c9366004612449565b610fd5565b6103d16104dc366004612504565b610fe9565b6104f46104ef36600461264b565b61105f565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a0016102f5565b61043a610539366004612413565b50565b61043a61054a366004612449565b6111de565b60408051603c815260b46020820152016102f5565b61056c6111f0565b604080516fffffffffffffffffffffffffffffffff9384168152929091166020830152016102f5565b6102eb6105a3366004612504565b61122e565b61043a6105b6366004612449565b611239565b61043a6105c9366004612449565b6112fc565b60408051808201909152601581527f72656473746f6e652d7072696d6172792d70726f6400000000000000000000006020820152610471565b7f55534454000000000000000000000000000000000000000000000000000000006102eb565b61033861133e565b60036102eb565b6102eb61064a3660046123f1565b60408051602080820194909452808201929092527f4dd0c77efa6f6d590c97573d8c70b714546e7311202ff7c11c484cc841d91bfc606080840191909152815180840390910181526080909201905280519101205490565b61043a6106b0366004612449565b611387565b6003610369565b6103d16113de565b7f3d01e4d77237ea0f771f1786da4d4ff757fcba6a92933aa53b1dcef2d6bd6fe2546102eb565b6104f4611443565b60006106fd6111f0565b6fffffffffffffffffffffffffffffffff1692915050565b60008060006107427fc68d7f1ee07d8668991a8951e720010c9d44c2f11c06b5cac61fbc40832639385490565b84118061074d575083155b1561078c576040517ff8ae8137000000000000000000000000000000000000000000000000000000008152600481018590526024015b60405180910390fd5b6040805160208082018890528183018790527f4dd0c77efa6f6d590c97573d8c70b714546e7311202ff7c11c484cc841d91bfc60608084019190915283518084039091018152608090920190925280519101205492506107ec8584610de9565b60006107f785610fd5565b9396608085901c9650939450505050565b600073ffffffffffffffffffffffffffffffffffffffff8216738bb8f32df04c8b654987daaed53d6b6091e3b7740361084357506000919050565b73ffffffffffffffffffffffffffffffffffffffff821673deb22f54738d54976c4c0fe5ce6d408e40d884990361087c57506001919050565b73ffffffffffffffffffffffffffffffffffffffff82167351ce04be4b3e32572c4ec9135221d0691ba7d202036108b557506002919050565b73ffffffffffffffffffffffffffffffffffffffff821673dd682daec5a90dd295d14da4b0bec9281017b5be036108ee57506003919050565b73ffffffffffffffffffffffffffffffffffffffff8216739c5ae89c4af6aa32ce58588dbaf90d18a855b6de0361092757506004919050565b6040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83166004820152602401610783565b919050565b600061098182610d83565b50600061098d83610c9a565b90506109998382610de9565b92915050565b6040517f44e029820000000000000000000000000000000000000000000000000000000081527f555344540000000000000000000000000000000000000000000000000000000060048201819052600091829030906344e0298290602401602060405180830381865afa158015610a1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3e9190612677565b90507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811115610999576040517feccac09b00000000000000000000000000000000000000000000000000000000815260048101829052602401610783565b600080610aa86114e0565b90506000610ab582611615565b61ffff16905080600003610af5576040517f8552ff3c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610b006002836126bf565b915060005b81811015610bf3576000610b1884611668565b9050600080610b286068876126bf565b90506000610b3682366126d2565b9050803592508265ffffffffffff16600003610b7e576040517f336dc9d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b87600003610b96578265ffffffffffff169750610bd7565b878365ffffffffffff1614610bd7576040517fd9d1f46500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610be184886126bf565b96505060019093019250610b05915050565b50505090565b6060815167ffffffffffffffff811115610c1557610c15612462565b604051908082528060200260200182016040528015610c3e578160200160208202803683370190505b50905060005b8251811015610c9457610c6f838281518110610c6257610c626126e5565b6020026020010151610c9a565b828281518110610c8157610c816126e5565b6020908102919091010152600101610c44565b50919050565b60006109998261064a7fc68d7f1ee07d8668991a8951e720010c9d44c2f11c06b5cac61fbc40832639385490565b6000803073ffffffffffffffffffffffffffffffffffffffff16638c3b990b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3a9190612677565b905069ffffffffffffffffffff811115610971576040517f1e93e47c00000000000000000000000000000000000000000000000000000000815260048101829052602401610783565b60007f55534454000000000000000000000000000000000000000000000000000000008203610db457506000919050565b6040517f9382940300000000000000000000000000000000000000000000000000000000815260048101839052602401610783565b80600003610e26576040517f0565ce2a00000000000000000000000000000000000000000000000000000000815260048101839052602401610783565b5050565b6000610e346111f0565b506fffffffffffffffffffffffffffffffff16919050565b600054610100900460ff1615808015610e6c5750600054600160ff909116105b80610e865750303b158015610e86575060005460ff166001145b610f12576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610783565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610f7057600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b801561053957600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b600080610fe1836116a4565b549392505050565b60606000610ff683610bf9565b905060005b8351811015611058576000848281518110611018576110186126e5565b6020026020010151905061102b81610d83565b5061104f81848481518110611042576110426126e5565b6020026020010151610de9565b50600101610ffb565b5092915050565b6000808080808080803073ffffffffffffffffffffffffffffffffffffffff166326bf15ff7f55534454000000000000000000000000000000000000000000000000000000006040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b168152600481019190915269ffffffffffffffffffff8c166024820152604401606060405180830381865afa15801561110b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112f9190612734565b9250925092508897507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115611195576040517feccac09b00000000000000000000000000000000000000000000000000000000815260048101849052602401610783565b8296506103e8826111a6919061279f565b6fffffffffffffffffffffffffffffffff169550806fffffffffffffffffffffffffffffffff16945088935050505091939590929450565b6111e781611700565b61053981611239565b60008061122661121e7f3d01e4d77237ea0f771f1786da4d4ff757fcba6a92933aa53b1dcef2d6bd6fe25490565b608081901c91565b915091509091565b60006109998261174f565b60006112476103e8836127ce565b9050603c60b442838110156112a8578261126182866126d2565b11156112a3576040517fb6b0916d0000000000000000000000000000000000000000000000000000000081526004810185905260248101829052604401610783565b6112f5565b816112b385836126d2565b11156112f5576040517f0321d0b50000000000000000000000000000000000000000000000000000000081526004810185905260248101829052604401610783565b5050505050565b61130461175a565b61130d816111de565b611316816117bd565b60006113206113de565b9050600061132d82611883565b9050611339828261188e565b505050565b600080600061136b7fc68d7f1ee07d8668991a8951e720010c9d44c2f11c06b5cac61fbc40832639385490565b9250600061137884610fd5565b9394608085901c949350915050565b3361138f5750565b6000611399610e2a565b9050808214610e26576040517f6bc11ec50000000000000000000000000000000000000000000000000000000081526004810182905260248101839052604401610783565b604080516001808252818301909252606091602080830190803683370190505090507f555344540000000000000000000000000000000000000000000000000000000081600081518110611434576114346126e5565b60200260200101818152505090565b6000806000806000611453610cc8565b945061145d61099f565b935060003073ffffffffffffffffffffffffffffffffffffffff16631b2758ee6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d09190612677565b9596949594859450879350915050565b60006602ed57011e00007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe036013581161480611548576040517fe7764c9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003660291115611585576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd7360135600060096115be600362ffffff85166126bf565b6115c891906126bf565b9050366115d66002836126bf565b111561160e576040517fc30a7bd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9392505050565b6000806116236020846126bf565b90503681111561165f576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b36033592915050565b600080600061167684611905565b9092509050604e6116888260206126bf565b61169290846127e2565b61169c91906126bf565b949350505050565b6040516000906116e39083907f207e00944d909d1224f0c253d58489121d736649f8393199f55eecf4f0cf3eb090602001918252602082015260400190565b604051602081830303815290604052805190602001209050919050565b600061170a610e2a565b9050808211610e26576040517fef05deba0000000000000000000000000000000000000000000000000000000081526004810183905260248101829052604401610783565b60006109998261195c565b4260006117656106f3565b9050600361177381836126bf565b831015611339576040517f83b3f5c4000000000000000000000000000000000000000000000000000000008152600481018490526024810183905260448101829052606401610783565b426fffffffffffffffffffffffffffffffff81111561180b576040517f70db678f00000000000000000000000000000000000000000000000000000000815260048101829052602401610783565b6fffffffffffffffffffffffffffffffff821115611858576040517f5cbfa8a100000000000000000000000000000000000000000000000000000000815260048101839052602401610783565b60809190911b177f3d01e4d77237ea0f771f1786da4d4ff757fcba6a92933aa53b1dcef2d6bd6fe255565b606061099982611a40565b815160011415806118a157508051600114155b156118d8576040517fbed42bab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6118e28282611bf0565b610e26816000815181106118f8576118f86126e5565b6020026020010151611c50565b6000808080806119166041876126bf565b9050600061192f6119286020846126bf565b3690611cb1565b803594509050611940816003611cb1565b62ffffff9490941697933563ffffffff16965092945050505050565b60008151600003611999576040517f9e198af900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6119a282611cbd565b6000600283516119b291906127ce565b9050600283516119c291906127f9565b600003611a1e576000611a11846119da6001856126d2565b815181106119ea576119ea6126e5565b6020026020010151858481518110611a0457611a046126e5565b6020026020010151611d0b565b905061169c6002826127ce565b828181518110611a3057611a306126e5565b6020026020010151915050919050565b60606000825167ffffffffffffffff811115611a5e57611a5e612462565b604051908082528060200260200182016040528015611a87578160200160208202803683370190505b5090506000835167ffffffffffffffff811115611aa657611aa6612462565b604051908082528060200260200182016040528015611acf578160200160208202803683370190505b5090506000845167ffffffffffffffff811115611aee57611aee612462565b604051908082528060200260200182016040528015611b2157816020015b6060815260200190600190039081611b0c5790505b50905060005b8551811015611b745760408051600380825260808201909252906020820160608036833701905050828281518110611b6157611b616126e5565b6020908102919091010152600101611b27565b506000611b7f6114e0565b90506000611b8c82611615565b61ffff169050611b9d6002836126bf565b60405190925060005b82811015611bd9576000611bbd8a89898989611d17565b9050611bc981866126bf565b6040849052945050600101611ba6565b50611be48487611fba565b98975050505050505050565b611bf86120e2565b611c00612134565b60005b825181101561133957611c48838281518110611c2157611c216126e5565b6020026020010151838381518110611c3b57611c3b6126e5565b602002602001015161219f565b600101611c03565b7fc68d7f1ee07d8668991a8951e720010c9d44c2f11c06b5cac61fbc408326393854611c7b8261223a565b6040514281527f0559884fd3a460db3073b7fc896cc77986f16e378210ded43186175bf646fc5f9060200160405180910390a350565b600061160e82846126d2565b8051602082016020820281019150805b82811015611d0557815b81811015611cfc578151815180821015611cf2578084528183525b5050602001611cd7565b50602001611ccd565b50505050565b600061160e82846126bf565b600080600080611d2685611905565b909250905060008080606081600d611d49611d426020896126bf565b89906122f0565b611d5391906126bf565b90506000611d6561192860688d6126bf565b90506000611d8283611d7860418f6126bf565b61192891906126bf565b9050611d8e8382611da1565b9350826020850120945081359650611de3565b604080518381526020818501810190925260009101838382377fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0019392505050565b611df48765ffffffffffff16611387565b611e0885611e0360418f6126bf565b6122fc565b9550611e1386610808565b60ff1699505050505050505060008060005b84811015611f8757611e38888583612392565b909350915060005b8c51811015611f7e578c8181518110611e5b57611e5b6126e5565b60200260200101518403611f765760008b8281518110611e7d57611e7d6126e5565b60200260200101519050611e9681896001901b16151590565b158015611ebf5750600360ff168d8381518110611eb557611eb56126e5565b6020026020010151105b15611f70578c8281518110611ed657611ed66126e5565b602002602001018051809190611eeb9061280d565b81525050838b8381518110611f0257611f026126e5565b602002602001015160018f8581518110611f1e57611f1e6126e5565b6020026020010151611f3091906126d2565b81518110611f4057611f406126e5565b60209081029190910101526001881b81178c8381518110611f6357611f636126e5565b6020026020010181815250505b50611f7e565b600101611e40565b50600101611e25565b50505081602082611f9891906126bf565b611fa291906127e2565b611fad90604e6126bf565b9998505050505050505050565b60606000835167ffffffffffffffff811115611fd857611fd8612462565b604051908082528060200260200182016040528015612001578160200160208202803683370190505b509050600360005b85518110156120d85781858281518110612025576120256126e5565b6020026020010151101561208b57848181518110612045576120456126e5565b6020026020010151826040517f2b13aef5000000000000000000000000000000000000000000000000000000008152600401610783929190918252602082015260400190565b60006120af8783815181106120a2576120a26126e5565b602002602001015161122e565b9050808483815181106120c4576120c46126e5565b602090810291909101015250600101612009565b5090949350505050565b600061210c7fc68d7f1ee07d8668991a8951e720010c9d44c2f11c06b5cac61fbc40832639385490565b6001017fc68d7f1ee07d8668991a8951e720010c9d44c2f11c06b5cac61fbc40832639385550565b600061215e7f3d01e4d77237ea0f771f1786da4d4ff757fcba6a92933aa53b1dcef2d6bd6fe25490565b9050600061218a7fc68d7f1ee07d8668991a8951e720010c9d44c2f11c06b5cac61fbc40832639385490565b90506000612197826116a4565b929092555050565b6121a98282610de9565b6000612232836121d77fc68d7f1ee07d8668991a8951e720010c9d44c2f11c06b5cac61fbc40832639385490565b60408051602081018490529081018290527f4dd0c77efa6f6d590c97573d8c70b714546e7311202ff7c11c484cc841d91bfc606082015260009060800160405160208183030381529060405280519060200120905092915050565b919091555050565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8211156122ec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e206160448201527f6e20696e743235360000000000000000000000000000000000000000000000006064820152608401610783565b5090565b600061160e82846127e2565b60408051600080825260208083018085528690523685900380850135831a948401859052803560608501819052910135608084018190529193909260019060a0016020604051602081039080840390855afa15801561235f573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00151979650505050505050565b600080806123a1604e876126bf565b905060006123ce6123c76123b66020896126bf565b6123c18860016126bf565b906122f0565b8390611d0b565b905060006123dc3683611cb1565b80359960209091013598509650505050505050565b6000806040838503121561240457600080fd5b50508035926020909101359150565b60006020828403121561242557600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461160e57600080fd5b60006020828403121561245b57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156124d8576124d8612462565b604052919050565b600067ffffffffffffffff8211156124fa576124fa612462565b5060051b60200190565b6000602080838503121561251757600080fd5b823567ffffffffffffffff81111561252e57600080fd5b8301601f8101851361253f57600080fd5b803561255261254d826124e0565b612491565b81815260059190911b8201830190838101908783111561257157600080fd5b928401925b8284101561258f57833582529284019290840190612576565b979650505050505050565b6020808252825182820181905260009190848201906040850190845b818110156125d2578351835292840192918401916001016125b6565b50909695505050505050565b60006020808352835180602085015260005b8181101561260c578581018301518582016040015282016125f0565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b60006020828403121561265d57600080fd5b813569ffffffffffffffffffff8116811461160e57600080fd5b60006020828403121561268957600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561099957610999612690565b8181038181111561099957610999612690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b80516fffffffffffffffffffffffffffffffff8116811461097157600080fd5b60008060006060848603121561274957600080fd5b8351925061275960208501612714565b915061276760408501612714565b90509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006fffffffffffffffffffffffffffffffff808416806127c2576127c2612770565b92169190910492915050565b6000826127dd576127dd612770565b500490565b808202811582820484141761099957610999612690565b60008261280857612808612770565b500690565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361283e5761283e612690565b506001019056fea2646970667358221220460d0342a850922c4a3b23025a13160f5e376927cc64218542356a3c743de1c864736f6c63430008170033",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "aggregateValues(uint256[])": {
        "details": "This function may be overridden by the child consumer contract. It should aggregate values from different signers to a single uint value. By default, it calculates the median value",
        "params": {
          "values": "An array of uint256 values from different signers"
        },
        "returns": {
          "_0": "Result of the aggregation in the form of a single number"
        }
      },
      "decimals()": {
        "details": "By default, RedStone uses 8 decimals for data feeds",
        "returns": {
          "_0": "decimals The number of decimals in the price feed values"
        }
      },
      "description()": {
        "returns": {
          "_0": "description"
        }
      },
      "getAllowedTimestampDiffsInSeconds()": {
        "details": "Helpful function for getting values for timestamp validation",
        "returns": {
          "maxDataAheadSeconds": "Max allowed number of seconds ahead of block.timrstamp",
          "maxDataDelaySeconds": "Max allowed number of seconds for data delay"
        }
      },
      "getBlockTimestamp()": {
        "details": "This function can be overriden, e.g. to use block.number instead of block.timestamp It can be useful in some L2 chains, as sometimes their different blocks can have the same timestamp",
        "returns": {
          "_0": "timestamp Timestamp or Block number or any other number that can identify time in the context of the given blockchain"
        }
      },
      "getBlockTimestampFromLatestUpdate()": {
        "returns": {
          "blockTimestamp": "The block timestamp of the latest successful update"
        }
      },
      "getDataFeedId()": {
        "returns": {
          "_0": "dataFeedId The identifier of the data feed"
        }
      },
      "getDataFeedIds()": {
        "details": "this function must be implemented in derived contracts",
        "returns": {
          "dataFeedIds": "An array of data feed identifiers"
        }
      },
      "getDataFeedIndex(bytes32)": {
        "details": "This function can (and should) be overriden to reduce gas costs of other functions",
        "params": {
          "dataFeedId": "The data feed identifier"
        },
        "returns": {
          "_0": "index The index of the data feed"
        }
      },
      "getDataServiceId()": {
        "details": "This function must be implemented by the child consumer contract. It should return dataServiceId which DataServiceWrapper will use if not provided explicitly . If not overridden, value will always have to be provided explicitly in DataServiceWrapper.",
        "returns": {
          "_0": "dataServiceId being consumed by contract"
        }
      },
      "getDataTimestampFromLatestUpdate()": {
        "details": "It's virtual, because its implementation can sometimes be different (e.g. SinglePriceFeedAdapterWithClearing)",
        "returns": {
          "lastDataTimestamp": "Timestamp of the latest reported data packages"
        }
      },
      "getLatestRoundId()": {
        "returns": {
          "latestRoundId": "latestRoundId"
        }
      },
      "getLatestRoundParams()": {
        "returns": {
          "latestRoundBlockTimestamp": "latestRoundBlockTimestamp",
          "latestRoundDataTimestamp": "latestRoundDataTimestamp",
          "latestRoundId": "latestRoundId"
        }
      },
      "getMinIntervalBetweenUpdates()": {
        "details": "You can override this function to change the required interval between udpates. Please do not set it to 0, as it may open many attack vectors",
        "returns": {
          "_0": "interval The required interval between updates"
        }
      },
      "getPackedTimestampsForRound(uint256)": {
        "params": {
          "roundId": "Requested round number"
        },
        "returns": {
          "roundTimestamps": "roundTimestamps"
        }
      },
      "getPackedTimestampsFromLatestUpdate()": {
        "details": "Returns 2 timestamps packed into a single uint256 number",
        "returns": {
          "packedTimestamps": "a single uin256 number with 2 timestamps"
        }
      },
      "getRoundData(uint80)": {
        "params": {
          "roundId": "Requested round identifier"
        }
      },
      "getRoundDataFromAdapter(bytes32,uint256)": {
        "params": {
          "dataFeedId": "Requested data feed",
          "roundId": "Requested round identifier"
        },
        "returns": {
          "dataFeedValue": "dataFeedValue",
          "roundBlockTimestamp": "roundBlockTimestamp",
          "roundDataTimestamp": "roundDataTimestamp"
        }
      },
      "getTimestampsFromLatestUpdate()": {
        "returns": {
          "blockTimestamp": "timestamp of the block when the update has happened",
          "dataTimestamp": "timestamp (usually in milliseconds) from the signed data packages"
        }
      },
      "getUniqueSignersThreshold()": {
        "details": "This function should be overridden by the child consumer contract.",
        "returns": {
          "_0": "The minimum required value of unique authorised signers"
        }
      },
      "getValueForDataFeed(bytes32)": {
        "params": {
          "dataFeedId": "The identifier of the requested data feed"
        },
        "returns": {
          "_0": "value The latest value of the given data feed"
        }
      },
      "getValueForDataFeedAndRound(bytes32,uint256)": {
        "details": "[HIGH RISK] Returns value for the requested data feed from the given round without validation.",
        "params": {
          "dataFeedId": "The data feed identifier",
          "roundId": "The number of the requested round"
        },
        "returns": {
          "dataFeedValue": "value for the requested data feed from the given round"
        }
      },
      "getValueForDataFeedUnsafe(bytes32)": {
        "details": "[HIGH RISK] Returns the value for a given data feed from the latest round without validation. Important! Using this function instead of `getValueForDataFeed` may cause significant risk for your smart contracts",
        "params": {
          "dataFeedId": "The data feed identifier"
        },
        "returns": {
          "dataFeedValue": "Unvalidated value of the latest successful update"
        }
      },
      "getValuesForDataFeeds(bytes32[])": {
        "params": {
          "dataFeedIds": "The array of identifiers for the requested feeds"
        },
        "returns": {
          "_0": "values Values of the requested data feeds in the corresponding order"
        }
      },
      "getValuesForDataFeedsUnsafe(bytes32[])": {
        "params": {
          "requestedDataFeedIds": "The array of identifiers for the requested feeds"
        },
        "returns": {
          "values": "Unvalidated values of the requested data feeds in the corresponding order"
        }
      },
      "latestAnswer()": {
        "returns": {
          "_0": "latestAnswer The latest successfully reported value"
        }
      },
      "latestRound()": {
        "returns": {
          "_0": "latestRound The number of the latest successful round"
        }
      },
      "latestRoundData()": {
        "details": "It uses few helpful functions to abstract logic of getting latest round id and value",
        "returns": {
          "answer": "The latest reported value",
          "answeredInRound": "The number of the latest round",
          "roundId": "The number of the latest round",
          "startedAt": "Block timestamp when the latest successful round started",
          "updatedAt": "Block timestamp of the latest successful round"
        }
      },
      "requireAuthorisedUpdater(address)": {
        "details": "This function should revert if msg.sender is not allowed to update data feed values",
        "params": {
          "updater": "The address of the proposed updater"
        }
      },
      "updateDataFeedsValues(uint256)": {
        "details": "This function requires an attached redstone payload to the transaction calldata. It also requires each data package to have exactly the same timestamp",
        "params": {
          "dataPackagesTimestamp": "Timestamp of each signed data package in the redstone payload"
        }
      },
      "validateDataFeedValueOnRead(bytes32,uint256)": {
        "details": "Reverts if proposed value for the proposed data feed id is invalid Is called on every NOT *unsafe method which reads dataFeed By default, it just checks if the value is not equal to 0, but it can be extended",
        "params": {
          "dataFeedId": "The data feed identifier",
          "valueForDataFeed": "Proposed value for the data feed"
        }
      },
      "validateDataFeedValueOnWrite(bytes32,uint256)": {
        "details": "Reverts if proposed value for the proposed data feed id is invalid Is called on every NOT *unsafe method which writes dataFeed By default, it does nothing",
        "params": {
          "dataFeedId": "The data feed identifier",
          "valueForDataFeed": "Proposed value for the data feed"
        }
      },
      "validateDataPackagesTimestampOnce(uint256)": {
        "params": {
          "dataPackagesTimestamp": "The proposed timestamp (usually in milliseconds)"
        }
      },
      "validateProposedDataPackagesTimestamp(uint256)": {
        "params": {
          "dataPackagesTimestamp": "The proposed timestamp (usually in milliseconds)"
        }
      },
      "validateTimestamp(uint256)": {
        "details": "Note! This function is not called directly, it's called for each data package    . in redstone payload and just verifies if each data package has the same timestamp as the one that was saved in the storage",
        "params": {
          "receivedTimestampMilliseconds": "Timestamp from a data package"
        }
      },
      "version()": {
        "details": "Currently it has no specific motivation and was added only to be compatible with the Chainlink interface",
        "returns": {
          "_0": "version"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "decimals()": {
        "notice": "Returns the number of decimals for the price feed"
      },
      "description()": {
        "notice": "Description of the Price Feed"
      },
      "getBlockTimestampFromLatestUpdate()": {
        "notice": "Returns block timestamp of the latest successful update"
      },
      "getDataFeedId()": {
        "notice": "Returns data feed identifier for the PriceFeed contract"
      },
      "getDataFeedIds()": {
        "notice": "Returns identifiers of all data feeds supported by the Adapter contract"
      },
      "getDataFeedIndex(bytes32)": {
        "notice": "Returns the unique index of the given data feed"
      },
      "getDataTimestampFromLatestUpdate()": {
        "notice": "Returns data timestamp from the latest update"
      },
      "getLatestRoundId()": {
        "notice": "Returns latest successful round number"
      },
      "getLatestRoundParams()": {
        "notice": "Returns data from the latest successful round"
      },
      "getMinIntervalBetweenUpdates()": {
        "notice": "Returns minimal required interval (usually in seconds) between subsequent updates"
      },
      "getPackedTimestampsForRound(uint256)": {
        "notice": "Returns timestamps related to the given round packed into one number"
      },
      "getRoundData(uint80)": {
        "notice": "Returns details for the given round"
      },
      "getRoundDataFromAdapter(bytes32,uint256)": {
        "notice": "Returns details for the given round and data feed"
      },
      "getTimestampsFromLatestUpdate()": {
        "notice": "Returns timestamps of the latest successful update"
      },
      "getValueForDataFeed(bytes32)": {
        "notice": "Returns the latest properly reported value of the data feed"
      },
      "getValuesForDataFeeds(bytes32[])": {
        "notice": "Returns the latest properly reported values for several data feeds"
      },
      "getValuesForDataFeedsUnsafe(bytes32[])": {
        "notice": "[HIGH RISK] Returns the latest properly reported values for several data feeds without validation Important! Using this function instead of `getValuesForDataFeeds` may cause significant risk for your smart contracts"
      },
      "latestAnswer()": {
        "notice": "Old Chainlink function for getting the latest successfully reported value"
      },
      "latestRound()": {
        "notice": "Old Chainlink function for getting the number of latest round"
      },
      "latestRoundData()": {
        "notice": "Returns details of the latest successful update round"
      },
      "requireAuthorisedUpdater(address)": {
        "notice": "Reverts if the updater is not authorised"
      },
      "updateDataFeedsValues(uint256)": {
        "notice": "Updates values of all data feeds supported by the Adapter contract"
      },
      "validateDataPackagesTimestampOnce(uint256)": {
        "notice": "Reverts if the proposed timestamp of data packages it too old or too new comparing to the current block timestamp"
      },
      "validateProposedDataPackagesTimestamp(uint256)": {
        "notice": "Reverts if the proposed timestamp of data packages it too old or too new comparing to the block.timestamp. It also ensures that the proposed timestamp is newer Then the one from the previous update"
      },
      "version()": {
        "notice": "Version of the Price Feed"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 52,
        "contract": "contracts/adapters/RedstonePriceFeedWithRoundsUSDT.sol:RedstonePriceFeedWithRoundsUSDT",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 55,
        "contract": "contracts/adapters/RedstonePriceFeedWithRoundsUSDT.sol:RedstonePriceFeedWithRoundsUSDT",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}